[{"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\index.tsx":"1","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\reportWebVitals.ts":"2","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\App.tsx":"3","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\Devices.tsx":"4","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\DeviceRender.tsx":"5","C:\\Users\\Marco\\git\\gateway-client-web\\src\\index.tsx":"6","C:\\Users\\Marco\\git\\gateway-client-web\\src\\reportWebVitals.ts":"7","C:\\Users\\Marco\\git\\gateway-client-web\\src\\OpenStuder\\OpenStuder.ts":"8","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleSimple\\AppSampleSimple.tsx":"9","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleHard\\AppSampleHard.tsx":"10","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleHard\\Devices.tsx":"11","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleHard\\DeviceMessageRender.tsx":"12","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleHard\\SystemInfo.tsx":"13","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleMedium\\AppSampleMedium.tsx":"14","C:\\Users\\Marco\\git\\gateway-client-web\\src\\HighchartsTimeSeries.tsx":"15"},{"size":500,"mtime":1612174867139,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":6172,"mtime":1613056576616,"results":"19","hashOfConfig":"17"},{"size":1490,"mtime":1612519156791,"results":"20","hashOfConfig":"17"},{"size":1605,"mtime":1613057208321,"results":"21","hashOfConfig":"17"},{"size":521,"mtime":1617111022670,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":61396,"mtime":1617266431910,"results":"25","hashOfConfig":"23"},{"size":5347,"mtime":1616745917634,"results":"26","hashOfConfig":"23"},{"size":13417,"mtime":1617263544451,"results":"27","hashOfConfig":"23"},{"size":9142,"mtime":1617110931203,"results":"28","hashOfConfig":"23"},{"size":4258,"mtime":1617264514765,"results":"29","hashOfConfig":"23"},{"size":1096,"mtime":1617106104314,"results":"30","hashOfConfig":"23"},{"size":5528,"mtime":1616749941671,"results":"31","hashOfConfig":"23"},{"size":2005,"mtime":1616749422392,"results":"32","hashOfConfig":"23"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"16hdhh2",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"o8738k",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"47"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\index.tsx",[],["72","73"],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\reportWebVitals.ts",[],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\App.tsx",["74"],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\Devices.tsx",[],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\DeviceRender.tsx",["75","76","77"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\index.tsx",["78","79"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppSampleMedium from './AppSampleMedium/AppSampleMedium';\nimport AppSampleSimple from \"./AppSampleSimple/AppSampleSimple\";\nimport AppSampleHard from \"./AppSampleHard/AppSampleHard\";\nimport reportWebVitals from './reportWebVitals';\n\n\n\n//Modify this function to change the example application\nReactDOM.render(\n  <React.StrictMode>\n    <AppSampleHard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n",["80","81"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\reportWebVitals.ts",[],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\OpenStuder\\OpenStuder.ts",["82","83"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleSimple\\AppSampleSimple.tsx",["84"],"import React from 'react';\nimport './AppSampleSimple.css';\nimport logo from \"../OpenStuder.svg\";\n\nimport {\n    SIAccessLevel,\n    SIConnectionState,\n    SIDeviceMessage,\n    SIGatewayCallback,\n    SIGatewayClient,\n    SIPropertyReadResult,\n    SIStatus,\n    SISubscriptionsResult\n} from \"../OpenStuder/OpenStuder\";\n\ntype Device={\n    powerId:string,\n    value:string|undefined,\n}\n\ntype AppState={\n    connectionState:SIConnectionState;\n    xTenderXTS:Device;\n    bsp:Device;\n    varioTrackVT65:Device;\n}\n\nclass AppSampleSimple extends React.Component<{ }, AppState> implements SIGatewayCallback{\n\n    siGatewayClient:SIGatewayClient;\n\n    constructor(props:any) {\n        super(props);\n        this.state={\n            connectionState:SIConnectionState.DISCONNECTED,\n            xTenderXTS:{powerId:\"xcom.11.3023\",value:undefined},\n            varioTrackVT65:{powerId:\"xcom.21.11004\",value:undefined},\n            bsp:{powerId:\"xcom.61.7003\",value:undefined},\n        };\n        this.siGatewayClient = new SIGatewayClient();\n    }\n\n    public componentDidMount() {\n        //Set the callback that the SIGatewayClient will call\n        this.siGatewayClient.setCallback(this);\n        //Try to connect with the server\n        this.siGatewayClient.connect(\"ws://153.109.24.113\",1987, \"basic\", \"basic\");\n    }\n\n    public onClick() {\n        //When button is pressed : read all wanted properties\n        let propertyIds:string[] = [this.state.xTenderXTS.powerId, this.state.bsp.powerId, this.state.varioTrackVT65.powerId];\n        this.siGatewayClient.readProperties(propertyIds);\n    }\n\n    public render() {\n        //Display the values and the read button when we are connected\n        if(this.state.connectionState===SIConnectionState.CONNECTED) {\n            return (\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <h1 className=\"Title\">\n                            <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span>\n                            </div>\n                        </h1>\n                        <button onClick={()=> this.onClick()}>Read Property</button>\n                        <p>XTender power : {this.state.xTenderXTS.value}</p>\n                        <p>BSP power : {this.state.bsp.value}</p>\n                        <p>VarioTrack power : {this.state.varioTrackVT65.value}</p>\n                    </header>\n                </div>\n            );\n        }\n        //Display that the client tries to connect\n        else{\n            return(\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <h1 className=\"Title\">\n                            <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span>\n                            </div>\n                        </h1>\n                        <p>\n                            Connecting...\n                        </p>\n                    </header>\n                </div>\n            );\n        }\n    }\n\n    onPropertyRead(status: SIStatus, propertyId: string, value?: string): void {\n\n    }\n\n    onConnectionStateChanged(state: SIConnectionState): void {\n        this.setState({connectionState:state});\n    }\n\n\n    onConnected(accessLevel: SIAccessLevel, gatewayVersion: string): void {\n        this.siGatewayClient.readDatalog(\"xcom.11.3023\",undefined,undefined,10);\n    }\n\n    onDatalogPropertiesRead(status: SIStatus, properties: string[]):void {\n    }\n\n    onDatalogRead(status: SIStatus, propertyId: string, count: number, values: string): void {\n    }\n\n    onDescription(status: SIStatus, description: string, id?: string): void {\n    }\n\n    onDeviceMessage(message: SIDeviceMessage): void {\n    }\n\n    onDisconnected(): void {\n    }\n\n    onEnumerated(status: SIStatus, deviceCount: number): void {\n    }\n\n    onError(reason: string): void {\n    }\n\n    onMessageRead(status: SIStatus, count: number, messages: SIDeviceMessage[]): void {\n\n    }\n\n    onPropertySubscribed(status: SIStatus, propertyId: string): void {\n    }\n\n    onPropertiesSubscribed(statuses: SISubscriptionsResult[]) {\n    }\n\n    onPropertyUnsubscribed(status: SIStatus, propertyId: string): void {\n    }\n\n    onPropertiesUnsubscribed(statuses: SISubscriptionsResult[]) {\n    }\n\n    onPropertyUpdated(propertyId: string, value: any): void {\n    }\n\n    onPropertyWritten(status: SIStatus, propertyId: string): void {\n    }\n\n    onPropertiesRead(results: SIPropertyReadResult[]) {\n        results.map(property =>{\n            if(property.status===SIStatus.SUCCESS){\n                //Construct Device with the new value\n                let temp: Device = {powerId: property.id, value: property.value};\n                //Select the good Device to change\n                switch (property.id){\n                    case this.state.xTenderXTS.powerId:\n                        this.setState({xTenderXTS:temp});\n                        break;\n                    case this.state.bsp.powerId :\n                        this.setState({bsp:temp});\n                        break;\n                    case this.state.varioTrackVT65.powerId :\n                        this.setState({varioTrackVT65:temp});\n                        break;\n                }\n            }\n        });\n    }\n}\n\nexport default AppSampleSimple;",["85","86"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleHard\\AppSampleHard.tsx",["87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"import React from 'react';\nimport './AppSampleHard.css';\nimport logo from \"../OpenStuder.svg\";\n\nimport {\n    SIAccessLevel,\n    SIConnectionState,\n    SIDescriptionFlags,\n    SIDeviceMessage,\n    SIGatewayCallback,\n    SIGatewayClient,\n    SIPropertyReadResult,\n    SIStatus,\n    SISubscriptionsResult\n} from \"../OpenStuder/OpenStuder\";\n\nimport Devices, {Device, DeviceRender} from \"./Devices\";\nimport DeviceMessagesRender from \"./DeviceMessageRender\";\nimport SystemInfo from \"./SystemInfo\";\n\nconst host:string=\"ws://153.109.24.113\";\nconst port:number=1987;\nconst user:string=\"basic\";\nconst password:string=\"basic\";\n\nenum VIEW{\n    SystemInfo,\n    EventsRecord,\n    Battery,\n    VarioTrack,\n    XTender\n}\n\ntype AppState={\n    devices:Devices,\n    currentView:VIEW,\n    messages:SIDeviceMessage[]\n}\n\nclass AppSampleHard extends React.Component<{ }, AppState> implements SIGatewayCallback{\n\n    siGatewayClient:SIGatewayClient;\n    driverId:string;\n\n    constructor(props:any) {\n        super(props);\n        this.siGatewayClient = new SIGatewayClient();\n        this.driverId=\"\";\n        this.state={\n            currentView:VIEW.SystemInfo,\n            devices: new Devices(),\n            messages:[]\n        };\n    }\n\n    public componentDidMount() {\n        //Set the callback that the SIGatewayClient will call\n        this.siGatewayClient.setCallback(this);\n        //Try to connect with the server\n        this.siGatewayClient.connect(host,port, user, password);\n    }\n\n    public onClick(id:string){\n        this.siGatewayClient.readProperty(this.driverId+\".\"+id);\n    }\n\n    public onSubmitWrittenTask(id:string, value:string){\n        this.siGatewayClient.writeProperty(this.driverId+\".\"+id);\n    }\n\n    public onSubmitReadMessagesTask(dateFrom:Date|undefined,dateTo:Date|undefined){\n        this.siGatewayClient.readMessages(dateFrom,dateTo);\n    }\n\n    public onSubscribeTask(id:string, subscribing:boolean){\n        if(subscribing){\n            this.siGatewayClient.subscribeToProperty(this.driverId+\".\"+id);\n        }\n        else{\n            this.siGatewayClient.unsubscribeFromProperty(this.driverId+\".\"+id);\n        }\n    }\n\n    onPropertyRead(status: SIStatus, propertyId: string, value?: string): void {\n        let newDevices=this.state.devices;\n        let newProperty = newDevices.findPropertyFromString(propertyId);\n        if(newDevices.hasPropertyFromString(propertyId) && status===SIStatus.SUCCESS) {\n            // @ts-ignore function hasProperty has value true\n            newDevices.findPropertyFromString(propertyId).value=value;\n            this.setState({devices:newDevices});\n        }\n    }\n\n    onConnectionStateChanged(state: SIConnectionState): void {\n        if(state===SIConnectionState.DISCONNECTED){\n            this.siGatewayClient.connect(host,port, user, password);\n        }\n    }\n\n\n    onConnected(accessLevel: SIAccessLevel, gatewayVersion: string): void {\n        let flags:SIDescriptionFlags[]=[SIDescriptionFlags.INCLUDE_DEVICE_INFORMATION,\n            SIDescriptionFlags.INCLUDE_PROPERTY_INFORMATION,\n            SIDescriptionFlags.INCLUDE_DRIVER_INFORMATION,SIDescriptionFlags.INCLUDE_ACCESS_INFORMATION]\n        this.siGatewayClient.describe(undefined,undefined,undefined,flags);\n    }\n\n    onDatalogPropertiesRead(status: SIStatus, properties: string[]):void {\n    }\n\n    onDatalogRead(status: SIStatus, propertyId: string, count: number, values: string): void {\n    }\n\n    onDescription(status: SIStatus, description: string, id?: string): void {\n        let newDevices:Devices=new Devices(Devices.jsonToDevices(description));\n        this.setState({devices:newDevices});\n        let pJSON = JSON.parse(description);\n        this.driverId = pJSON.instances[0].id;\n    }\n\n    onDeviceMessage(message: SIDeviceMessage): void {\n        let messages = this.state.messages;\n        messages.push(message);\n        this.setState({messages:messages});\n    }\n\n    onDisconnected(): void {\n    }\n\n    onEnumerated(status: SIStatus, deviceCount: number): void {\n    }\n\n    onError(reason: string): void {\n    }\n\n    onMessageRead(status: SIStatus, count: number, messages: SIDeviceMessage[]): void {\n        if(status===SIStatus.SUCCESS){\n            let newMessages:SIDeviceMessage[]=this.state.messages;\n            messages.map(message=>{\n                newMessages.push(message);\n            });\n            this.setState({messages:newMessages});\n        }\n    }\n\n    public changeView(newView:VIEW){\n        this.setState({currentView:newView});\n    }\n\n    onPropertySubscribed(status: SIStatus, propertyId: string): void {\n        let newDevices=this.state.devices;\n        let newProperty = newDevices.findPropertyFromString(propertyId);\n        if(newDevices.hasPropertyFromString(propertyId) && status===SIStatus.SUCCESS) {\n            // @ts-ignore function hasProperty has value true\n            newDevices.findPropertyFromString(propertyId).subscribed=true;\n            this.setState({devices:newDevices});\n        }\n    }\n\n    onPropertiesSubscribed(statuses: SISubscriptionsResult[]) {\n        let newDevices=this.state.devices;\n        statuses.map(status =>{\n            if(status.status===SIStatus.SUCCESS && newDevices.hasPropertyFromString(status.id)){\n                // @ts-ignore function hasProperty has value true\n                newDevices.findPropertyFromString(status.id).subscribed=true;\n            }\n        });\n        this.setState({devices:newDevices});\n    }\n\n    onPropertyUnsubscribed(status: SIStatus, propertyId: string): void {\n        let newDevices=this.state.devices;\n        let newProperty = newDevices.findPropertyFromString(propertyId);\n        if(newDevices.hasPropertyFromString(propertyId) && status===SIStatus.SUCCESS) {\n            // @ts-ignore function hasProperty has value true\n            newDevices.findPropertyFromString(propertyId).subscribed=false;\n            this.setState({devices:newDevices});\n        }\n    }\n\n    onPropertiesUnsubscribed(statuses: SISubscriptionsResult[]) {\n        let newDevices=this.state.devices;\n        statuses.map(status =>{\n            if(status.status===SIStatus.SUCCESS && newDevices.hasPropertyFromString(status.id)){\n                // @ts-ignore function hasProperty has value true\n                newDevices.findPropertyFromString(status.id).subscribed=false;\n            }\n        });\n        this.setState({devices:newDevices});\n    }\n\n    onPropertyUpdated(propertyId: string, value: any): void {\n        let newDevices=this.state.devices;\n        let newProperty = newDevices.findPropertyFromString(propertyId);\n        if(newDevices.hasPropertyFromString(propertyId)) {\n            // @ts-ignore function hasProperty has value true\n            newDevices.findPropertyFromString(propertyId).value=value;\n            this.setState({devices:newDevices});\n        }\n    }\n\n    onPropertyWritten(status: SIStatus, propertyId: string): void {\n    }\n\n    onPropertiesRead(results: SIPropertyReadResult[]) {\n        let newDevices=this.state.devices;\n        results.map(result =>{\n            if(result.status===SIStatus.SUCCESS && newDevices.hasPropertyFromString(result.id)){\n                // @ts-ignore function hasProperty has value true\n                newDevices.findPropertyFromString(result.id).value=result.value;\n            }\n        });\n        this.setState({devices:newDevices});\n    }\n\n    public render() {\n        if(this.state.devices.devices[0]!==undefined){\n            return(this.renderConnected());\n        }\n        else{\n            return(this.renderConnecting());\n        }\n    }\n\n    public renderConnecting(){\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"Title\">\n                        <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span>\n                        </div>\n                    </h1>\n                </header>\n                <h2>\n                    Connecting...\n                </h2>\n            </div>\n        );\n    }\n\n    public renderConnected(){\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"Title\">\n                        <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span>\n                        </div>\n                    </h1>\n                </header>\n                {this.renderSidebar()}\n                <div className=\"content\">{this.renderContent()}</div>\n            </div>\n        );\n    }\n\n    public renderSidebar(){\n        let varioTrackMCSubLink;\n        let varioTrackVT65SubLink;\n        let xTenderXTSSubLink;\n        let xTenderMCSubLink;\n        this.state.devices.devices.map(device=>{\n            if(device.model.includes(\"VarioTrack VT-65\")){\n                varioTrackVT65SubLink=<a className=\"subLink\" href={\"#\"+device.model} onClick={()=>this.changeView(VIEW.VarioTrack)}>-{device.model}</a>\n            }\n            if(device.model.includes(\"Xtender XTS\")){\n                xTenderXTSSubLink=<a className=\"subLink\" href={\"#\"+device.model} onClick={()=>this.changeView(VIEW.XTender)}>-{device.model}</a>\n            }\n            if(device.model.includes(\"VarioTrack multicast\")){\n                varioTrackMCSubLink=<a className=\"subLink\" href={\"#\"+device.model} onClick={()=>this.changeView(VIEW.VarioTrack)}>-{device.model}</a>\n            }\n            if(device.model.includes(\"Xtender multicast\")){\n                xTenderMCSubLink=<a className=\"subLink\" href={\"#\"+device.model} onClick={()=>this.changeView(VIEW.XTender)}>-{device.model}</a>\n            }\n        });\n        return(\n            <div>\n                <div className=\"sidenav\">\n                    <a href=\"#\" onClick={()=>this.changeView(VIEW.SystemInfo)}>System info</a>\n                    <a href=\"#\" onClick={()=>this.changeView(VIEW.EventsRecord)}>Notification center</a>\n                    <a href=\"#\" onClick={()=>this.changeView(VIEW.Battery)}>Battery</a>\n                    <a href=\"#\" onClick={()=>this.changeView(VIEW.VarioTrack)}>VarioTrack</a>\n                    {varioTrackVT65SubLink}\n                    {varioTrackMCSubLink}\n                    <a href=\"#\" onClick={()=>this.changeView(VIEW.XTender)}>XTender</a>\n                    {xTenderXTSSubLink}\n                    {xTenderMCSubLink}\n                </div>\n            </div>\n        );\n    }\n\n    public renderContent(){\n        switch(this.state.currentView){\n            case VIEW.SystemInfo:\n                return(\n                    <div>{this.renderSystemInfo()}</div>\n                    );\n            case VIEW.EventsRecord:\n                return(\n                    <div>{this.renderEventsRecord()}</div>\n                );\n            case VIEW.Battery:\n                return(\n                    <div>{this.renderBattery()}</div>\n                );\n            case VIEW.VarioTrack:\n                return(\n                    <div>{this.renderVarioTrack()}</div>\n                );\n            case VIEW.XTender:\n                return(\n                    <div>{this.renderXTender()}</div>\n                );\n        }\n    }\n\n    public renderSystemInfo(){\n        let batteryDevice = this.state.devices.findDevice(61);\n        let varioTrackDevice = this.state.devices.findDevice(21);\n        let xTenderDevice = this.state.devices.findDevice(11);\n        return(\n            <SystemInfo  battery={batteryDevice} varioTrack={varioTrackDevice} xTender={xTenderDevice}/>\n        );\n    }\n\n    public renderEventsRecord(){\n        return(\n            <div>\n                <DeviceMessagesRender messages={this.state.messages} onSubmit={(dateFrom, dateTo) => this.onSubmitReadMessagesTask(dateFrom,dateTo)}/>\n            </div>\n        );\n    }\n\n    public renderBattery(){\n        let batteryDevice:Device|undefined=this.state.devices.findDevice(61);\n        if(batteryDevice) {\n            return (\n                <DeviceRender device={batteryDevice} onClick={(id:string)=>this.onClick(id)} onSubmit={(id,value)=>this.onSubmitWrittenTask(id,value)}\n                              onSubscribeTask={(id,subscribing)=>this.onSubscribeTask(id,subscribing)}/>\n            );\n        }\n        else{\n            return(\n                <div>No BSP device found</div>\n            );\n        }\n    }\n\n    public renderVarioTrack(){\n        return(\n            <div>\n                {this.state.devices.devices.map(device=>{\n                    if(device.model.includes(\"VarioTrack\")){\n                        return <DeviceRender device={device} onClick={(id:string)=>this.onClick(id)} onSubmit={()=>this.onSubmitWrittenTask}\n                                             onSubscribeTask={(id,subscribing)=>this.onSubscribeTask(id,subscribing)}/>\n                    }\n                })}\n            </div>\n        );\n    }\n\n    public renderXTender(){\n        return(\n            <div>\n                {this.state.devices.devices.map(device=>{\n                    if(device.model.includes(\"Xtender\")){\n                        return <DeviceRender device={device} onClick={(id:string)=>this.onClick(id)} onSubmit={()=>this.onSubmitWrittenTask}\n                                             onSubscribeTask={(id,subscribing)=>this.onSubscribeTask(id,subscribing)}/>\n                    }\n                })}\n            </div>\n        );\n    }\n}\n\nexport default AppSampleHard;\n","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleHard\\Devices.tsx",["103","104","105","106"],"import React from \"react\";\r\n\r\nexport type DeviceProperty = {\r\n    value: string|undefined,\r\n    id: number,\r\n    description: string,\r\n    readable: boolean,\r\n    writeable: boolean,\r\n    type: string,\r\n    unit: string|undefined,\r\n    subscribed:boolean,\r\n}\r\n\r\nexport type Device = {\r\n    model: string,\r\n    properties: DeviceProperty[],\r\n    id: number,\r\n}\r\n\r\nclass Devices{\r\n    devices: Device[];\r\n    constructor(devices?:Device[]) {\r\n        if(devices) {\r\n            this.devices = devices;\r\n        }\r\n        else{\r\n            this.devices = [];\r\n        }\r\n    }\r\n    public static jsonToDevices(json:string):Device[]{\r\n        let devices:Device[];\r\n        let pJSON = JSON.parse(json);\r\n        let instances = pJSON.instances;\r\n        if(instances) {\r\n            let devicesList = instances[0].devices;\r\n            let tempDevices: Device[] = [];\r\n            for (const elementDevice of devicesList) {\r\n                let tempDevice: Device = {model: elementDevice.model, properties: [], id: elementDevice.id};\r\n                for (const elementProperty of elementDevice.properties) {\r\n                    let tempProperty: DeviceProperty = {\r\n                        value: undefined,\r\n                        id: elementProperty.id,\r\n                        description: elementProperty.description,\r\n                        readable: elementProperty.readable,\r\n                        writeable: elementProperty.writeable,\r\n                        type: elementProperty.type,\r\n                        unit: elementProperty.unit,\r\n                        subscribed:false\r\n                    };\r\n                    tempDevice.properties.push(tempProperty);\r\n                }\r\n                tempDevices.push(tempDevice);\r\n            }\r\n            devices=tempDevices;\r\n        }\r\n        else{\r\n            devices=[];\r\n        }\r\n        return devices;\r\n    }\r\n\r\n    public findDevice(id:number):Device|undefined{\r\n        let deviceFound:Device|undefined;\r\n        this.devices.map(device=>{\r\n           if(id===+device.id){\r\n               deviceFound=device;\r\n           }\r\n        });\r\n        return deviceFound;\r\n    }\r\n\r\n    public hasDevice(id:number):boolean{\r\n        return this.findDevice(id) !== undefined;\r\n\r\n    }\r\n\r\n    public findPropertyFromString(idProperty:string):DeviceProperty|undefined{\r\n        let ids:string[] = (idProperty.split(\".\"));\r\n        return this.findProperty(+ids[ids.length-2], +ids[ids.length-1]);\r\n    }\r\n    public findProperty(idDevice:number, idProperty:number):DeviceProperty|undefined{\r\n        let device = this.findDevice(idDevice);\r\n        let propertyFound:DeviceProperty|undefined;\r\n        if(device!==undefined){\r\n            device.properties.map(property=>{\r\n                if(property.id===+idProperty){\r\n                    propertyFound = property;\r\n                }\r\n            });\r\n        }\r\n        return propertyFound;\r\n    }\r\n\r\n    public hasProperty(idDevice:number, idProperty:number):boolean{\r\n        return this.findProperty(idDevice, idProperty) !== undefined;\r\n    }\r\n\r\n    public hasPropertyFromString(ids:string):boolean{\r\n        return this.findPropertyFromString(ids) !==undefined;\r\n    }\r\n}\r\n\r\nenum typeWidget{\r\n    NONE,\r\n    BUTTON_READ,\r\n    BUTTON_SUBSCRIBE,\r\n    TEXTBOX\r\n}\r\n\r\ntype WRprops={\r\n    type:typeWidget,\r\n    id:string,\r\n    onClick:(id:string)=>void,\r\n}\r\n\r\nclass WidgetRead extends React.Component<WRprops,{}>{\r\n    inputValue:string;\r\n    constructor(props:any){\r\n        super(props);\r\n        this.inputValue=\"\";\r\n        this.state={subscribed:false};\r\n    }\r\n\r\n    public onClick(){\r\n        this.props.onClick(this.props.id);\r\n    }\r\n\r\n    public render(){\r\n        if(this.props.type===typeWidget.BUTTON_READ){\r\n            return(<button onClick={()=>this.onClick()}> Read </button>);\r\n        }\r\n\r\n        else{\r\n                return(<div>-</div>);\r\n            }\r\n        }\r\n}\r\n\r\ntype WSprops={\r\n    type:typeWidget,\r\n    id:string,\r\n    subscribed:boolean,\r\n    onSubscribeTask:(id:string, subscribing:boolean)=>void\r\n}\r\n\r\nclass WidgetSubscribe extends React.Component<WSprops,{}>{\r\n    constructor(props:any){\r\n        super(props);\r\n    }\r\n\r\n    public onSubscribeTask(){\r\n        let subscribed:boolean = !this.props.subscribed;\r\n        this.props.onSubscribeTask(this.props.id,subscribed);\r\n    }\r\n\r\n    public render(){\r\n        if(this.props.type===typeWidget.BUTTON_SUBSCRIBE){\r\n            let label:string= !this.props.subscribed?\"Subscribe\":\"Unsubscribe\";\r\n            return(<button onClick={()=>this.onSubscribeTask()}> {label} </button>)\r\n        }\r\n\r\n        else{\r\n            return(<div>-</div>);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ntype WWprops={\r\n    type:typeWidget,\r\n    id:string,\r\n    onSubmit:(id:string, value:string)=>void,\r\n}\r\nclass WidgetWrite extends React.Component<WWprops, { }>{\r\n    inputValue:string;\r\n    constructor(props:any){\r\n        super(props);\r\n        this.inputValue=\"\";\r\n        this.state={subscribed:false};\r\n    }\r\n\r\n    public onSubmit(){\r\n        this.props.onSubmit(this.props.id, this.inputValue);\r\n    }\r\n\r\n    public onChange(event:React.ChangeEvent<HTMLInputElement>){\r\n        this.inputValue=event.target.value;\r\n    }\r\n\r\n    public render(){\r\n        if(this.props.type===typeWidget.TEXTBOX){\r\n            return(\r\n                <div>\r\n                    <input type=\"text\" name=\"value\" form=\"form\" onChange={(event => this.onChange(event))}/>\r\n                    <input type=\"submit\" value=\"send\" form=\"form\" onClick={()=>this.onSubmit()}/>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(<div>-</div>);\r\n        }\r\n    }\r\n}\r\n\r\ntype DRprops ={\r\n    device:Device,\r\n    onClick:(id:string)=>void,\r\n    onSubmit:(id:string, value:string)=>void,\r\n    onSubscribeTask:(id:string, subscribing:boolean)=>void\r\n}\r\n\r\nexport class DeviceRender extends React.Component<DRprops, {}>{\r\n    constructor(props:any) {\r\n        super(props);\r\n    }\r\n\r\n    public onClick(id:string){\r\n        this.props.onClick(id);\r\n    }\r\n\r\n    public onSubmit(id:string,value:string){\r\n        this.props.onSubmit(id,value);\r\n    }\r\n\r\n    public onSubscribeTask(id:string, subscribing:boolean){\r\n        this.props.onSubscribeTask(id,subscribing);\r\n    }\r\n\r\n    public renderProperty(property:DeviceProperty, id:string){\r\n        let readButton:typeWidget;\r\n        let writeTextBox:typeWidget;\r\n        let subscribeButton:typeWidget = typeWidget.BUTTON_SUBSCRIBE;\r\n        if(property.readable===true){\r\n            readButton = typeWidget.BUTTON_READ;\r\n        }\r\n        else{\r\n            readButton = typeWidget.NONE;\r\n        }\r\n        if(property.writeable===true){\r\n            writeTextBox = typeWidget.TEXTBOX;\r\n        }\r\n        else{\r\n            writeTextBox = typeWidget.NONE;\r\n        }\r\n        let value:string=property.value?\"\"+property.value:\"-\";\r\n        value += property.unit?\" [\"+property.unit+\"]\":\"\";\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    {property.id}\r\n                </td>\r\n                <td>\r\n                    {property.description}\r\n                </td>\r\n                <td>\r\n                    {value}\r\n                </td>\r\n                <td>\r\n                    <WidgetRead type={readButton} id={this.props.device.id+\".\"+property.id}\r\n                                onClick={(id)=>this.onClick(id)}/>\r\n                </td>\r\n                <td>\r\n                    <WidgetWrite type={writeTextBox} id={this.props.device.id+\".\"+property.id}\r\n                                  onSubmit={(id,value) => this.onSubmit(id, value)} />\r\n                </td>\r\n                <td>\r\n                    <WidgetSubscribe type={subscribeButton} id={this.props.device.id+\".\"+property.id} subscribed={property.subscribed}\r\n                                     onSubscribeTask={(id,subscribing)=>this.onSubscribeTask(id,subscribing)}/>\r\n                </td>\r\n            </tr>\r\n    );\r\n    }\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h2 id={this.props.device.model}>\r\n                    {this.props.device.model} with ID {this.props.device.id}\r\n                </h2>\r\n                <tr>\r\n                    <th scope=\"col\">\r\n                        Property ID\r\n                    </th>\r\n                    <th scope=\"col\">\r\n                        Property Description\r\n                    </th>\r\n                    <th scope=\"col\">\r\n                        Actual value\r\n                    </th >\r\n                    <th scope=\"col\">\r\n                        Read Property\r\n                    </th>\r\n                    <th scope=\"col\">\r\n                        Write Property\r\n                    </th>\r\n                    <th scope=\"col\">\r\n                        Subscribe\r\n                    </th>\r\n                </tr>\r\n                {this.props.device.properties.map(property => {\r\n                    let id:string = this.props.device.id+\".\"+property.id;\r\n                    return this.renderProperty(property, id);\r\n                })}\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default Devices;","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleHard\\DeviceMessageRender.tsx",["107","108"],"import React from \"react\";\r\nimport {SIDeviceMessage} from \"../OpenStuder/OpenStuder\"\r\nimport Devices, {DeviceProperty} from \"./Devices\";\r\n\r\ntype DMRprops={\r\n    messages:SIDeviceMessage[],\r\n    onSubmit:(dateFrom?:Date,dateTo?:Date)=>void,\r\n}\r\n\r\nclass DeviceMessagesRender extends React.Component<DMRprops, {}>{\r\n    dateFrom:string;\r\n    dateTo:string;\r\n    dateToValidity:string;\r\n    dateFromValidity:string;\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.dateFrom=\"\";\r\n        this.dateTo=\"\";\r\n        this.dateToValidity=\"\";\r\n        this.dateFromValidity=\"\";\r\n    }\r\n\r\n    public onSubmit(){\r\n        let valid:boolean=true;\r\n        this.dateToValidity=\"\";\r\n        this.dateFromValidity=\"\";\r\n        let dateFrom:Date|undefined;\r\n        let dateTo:Date|undefined;\r\n        dateFrom=new Date(this.dateFrom);\r\n        dateTo=new Date(this.dateTo);\r\n        if(isNaN(dateFrom.getTime())){\r\n            dateFrom=undefined;\r\n            if(this.dateFrom!==\"\") {\r\n                this.dateFromValidity = \"Invalid date \\\"from\\\"\";\r\n                valid=false;\r\n            }\r\n        }\r\n        if(isNaN(dateTo.getTime())){\r\n            dateTo=undefined;\r\n            if(this.dateTo!==\"\") {\r\n                this.dateFromValidity = \"Invalid date \\\"until\\\"\";\r\n                valid=false;\r\n            }\r\n        }\r\n        if(valid) {\r\n            this.props.onSubmit(dateFrom, dateTo);\r\n        }\r\n    }\r\n\r\n    public onChangeFrom(event:React.ChangeEvent<HTMLInputElement>){\r\n        this.dateFrom=event.target.value;\r\n    }\r\n\r\n    public onChangeTo(event:React.ChangeEvent<HTMLInputElement>){\r\n        this.dateTo=event.target.value;\r\n    }\r\n\r\n    public renderMessage(message:SIDeviceMessage){\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    {\"\"+message.accessId}\r\n                </td>\r\n                <td>\r\n                    {\"\"+message.deviceId}\r\n                </td>\r\n                <td>\r\n                    {\"\"+message.message}\r\n                </td>\r\n                <td>\r\n                    {\"\"+message.timestamp}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    public renderRequest(){\r\n        return(\r\n            <div>\r\n                <h2>Request stored messages :</h2><br/>\r\n                <p> Format : yyyy-MM-dd or yyyy-MM-ddTHH:mm:ss</p><br/>\r\n                <p>From:</p>\r\n                <input type=\"text\" name=\"value\" form=\"form\" onChange={(event => this.onChangeFrom(event))}/><br/>\r\n                <p>Until:</p>\r\n                <input type=\"text\" name=\"value\" form=\"form\" onChange={(event => this.onChangeTo(event))}/><br/>\r\n                <input type=\"submit\" value=\"send\" form=\"form\" onClick={()=>this.onSubmit()}/><br/>\r\n                <p className=\"error\">{this.dateFromValidity}</p>\r\n                <p className=\"error\">{this.dateToValidity}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public render() {\r\n        if(this.props.messages.length>0) {\r\n            return (\r\n                <div>\r\n                    <h2 className=\"content\">\r\n                        Notification Center\r\n                    </h2>\r\n                    <tr>\r\n                        <th scope=\"col\">\r\n                            Source\r\n                        </th>\r\n                        <th scope=\"col\">\r\n                            Device ID\r\n                        </th>\r\n                        <th scope=\"col\">\r\n                            Message\r\n                        </th>\r\n                        <th scope=\"col\">\r\n                            Date\r\n                        </th>\r\n                    </tr>\r\n                    {this.props.messages.map(message => {\r\n                        return this.renderMessage(message);\r\n                    })}\r\n                    {this.renderRequest()}\r\n                </div>);\r\n        }\r\n        else{\r\n            return (\r\n                <div>\r\n                    <h2>\r\n                        Notification Center\r\n                    </h2>\r\n                    <p className=\"content\">\r\n                        No messages\r\n                    </p>\r\n                    {this.renderRequest()}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default DeviceMessagesRender;","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleHard\\SystemInfo.tsx",["109","110"],"import React from \"react\";\r\nimport {Device} from \"./Devices\";\r\nimport icn_gen from \"./ressources/icn_gen_62x62.svg\";\r\n\r\ntype SysInfoProps={\r\n    battery:Device|undefined,\r\n    varioTrack:Device|undefined,\r\n    xTender:Device|undefined\r\n}\r\n\r\nclass SystemInfo extends React.Component<SysInfoProps, {}>{\r\n    constructor(props:any) {\r\n        super(props);\r\n    }\r\n\r\n    public render(){\r\n        if(this.props.battery&&this.props.varioTrack&&this.props.xTender) {\r\n            let value = this.props.varioTrack.properties.map(property=>{\r\n               if(property.id===11004){\r\n                   return \"id found\";\r\n               }\r\n            });\r\n            return (\r\n                <div className=\"content\">\r\n                    <figure>\r\n                        <img src={icn_gen} height=\"62\" width=\"62\" alt=\"meh\"/>\r\n                        <figcaption>{value}</figcaption>\r\n                    </figure>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div></div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default SystemInfo;","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSampleMedium\\AppSampleMedium.tsx",[],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\HighchartsTimeSeries.tsx",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":84,"column":15,"nodeType":"117","messageId":"118","endLine":84,"endColumn":44},{"ruleId":"115","severity":1,"message":"119","line":4,"column":9,"nodeType":"117","messageId":"118","endLine":4,"endColumn":23},{"ruleId":"120","severity":1,"message":"121","line":13,"column":5,"nodeType":"122","messageId":"123","endLine":15,"endColumn":6},{"ruleId":"115","severity":1,"message":"124","line":43,"column":13,"nodeType":"117","messageId":"118","endLine":43,"endColumn":21},{"ruleId":"115","severity":1,"message":"125","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":23},{"ruleId":"115","severity":1,"message":"126","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":23},{"ruleId":"111","replacedBy":"127"},{"ruleId":"113","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":348,"column":29,"nodeType":"131","messageId":"132","endLine":348,"endColumn":31},{"ruleId":"129","severity":1,"message":"130","line":1184,"column":70,"nodeType":"131","messageId":"132","endLine":1184,"endColumn":72},{"ruleId":"129","severity":1,"message":"130","line":149,"column":30,"nodeType":"131","messageId":"132","endLine":149,"endColumn":32},{"ruleId":"111","replacedBy":"133"},{"ruleId":"113","replacedBy":"134"},{"ruleId":"115","severity":1,"message":"135","line":86,"column":13,"nodeType":"117","messageId":"118","endLine":86,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":139,"column":33,"nodeType":"131","messageId":"132","endLine":139,"endColumn":35},{"ruleId":"115","severity":1,"message":"135","line":152,"column":13,"nodeType":"117","messageId":"118","endLine":152,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":162,"column":29,"nodeType":"131","messageId":"132","endLine":162,"endColumn":31},{"ruleId":"115","severity":1,"message":"135","line":173,"column":13,"nodeType":"117","messageId":"118","endLine":173,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":183,"column":29,"nodeType":"131","messageId":"132","endLine":183,"endColumn":31},{"ruleId":"115","severity":1,"message":"135","line":194,"column":13,"nodeType":"117","messageId":"118","endLine":194,"endColumn":24},{"ruleId":"129","severity":1,"message":"130","line":207,"column":28,"nodeType":"131","messageId":"132","endLine":207,"endColumn":30},{"ruleId":"129","severity":1,"message":"130","line":261,"column":46,"nodeType":"131","messageId":"132","endLine":261,"endColumn":48},{"ruleId":"136","severity":1,"message":"137","line":278,"column":21,"nodeType":"138","endLine":278,"endColumn":80},{"ruleId":"136","severity":1,"message":"137","line":279,"column":21,"nodeType":"138","endLine":279,"endColumn":82},{"ruleId":"136","severity":1,"message":"137","line":280,"column":21,"nodeType":"138","endLine":280,"endColumn":77},{"ruleId":"136","severity":1,"message":"137","line":281,"column":21,"nodeType":"138","endLine":281,"endColumn":80},{"ruleId":"136","severity":1,"message":"137","line":284,"column":21,"nodeType":"138","endLine":284,"endColumn":77},{"ruleId":"129","severity":1,"message":"139","line":352,"column":55,"nodeType":"131","messageId":"140","endLine":352,"endColumn":57},{"ruleId":"129","severity":1,"message":"139","line":365,"column":55,"nodeType":"131","messageId":"140","endLine":365,"endColumn":57},{"ruleId":"129","severity":1,"message":"130","line":64,"column":32,"nodeType":"131","messageId":"132","endLine":64,"endColumn":34},{"ruleId":"129","severity":1,"message":"130","line":85,"column":43,"nodeType":"131","messageId":"132","endLine":85,"endColumn":45},{"ruleId":"120","severity":1,"message":"121","line":147,"column":5,"nodeType":"122","messageId":"123","endLine":149,"endColumn":6},{"ruleId":"120","severity":1,"message":"121","line":213,"column":5,"nodeType":"122","messageId":"123","endLine":215,"endColumn":6},{"ruleId":"115","severity":1,"message":"141","line":3,"column":8,"nodeType":"117","messageId":"118","endLine":3,"endColumn":15},{"ruleId":"115","severity":1,"message":"119","line":3,"column":18,"nodeType":"117","messageId":"118","endLine":3,"endColumn":32},{"ruleId":"120","severity":1,"message":"121","line":12,"column":5,"nodeType":"122","messageId":"123","endLine":14,"endColumn":6},{"ruleId":"129","severity":1,"message":"139","line":18,"column":70,"nodeType":"131","messageId":"140","endLine":18,"endColumn":72},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"@typescript-eslint/no-unused-vars","'responseSubscription' is assigned a value but never used.","Identifier","unusedVar","'DeviceProperty' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'btnLabel' is assigned a value but never used.","'AppSampleMedium' is defined but never used.","'AppSampleSimple' is defined but never used.",["142"],["143"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["142"],["143"],"'newProperty' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Devices' is defined but never used.","no-global-assign","no-unsafe-negation"]