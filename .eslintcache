[{"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\index.tsx":"1","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\reportWebVitals.ts":"2","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\App.tsx":"3","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\Devices.tsx":"4","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\DeviceRender.tsx":"5","C:\\Users\\Marco\\git\\gateway-client-web\\src\\index.tsx":"6","C:\\Users\\Marco\\git\\gateway-client-web\\src\\reportWebVitals.ts":"7","C:\\Users\\Marco\\git\\gateway-client-web\\src\\App.tsx":"8","C:\\Users\\Marco\\git\\gateway-client-web\\src\\DeviceRender.tsx":"9","C:\\Users\\Marco\\git\\gateway-client-web\\src\\SIGatewayClient.tsx":"10","C:\\Users\\Marco\\git\\gateway-client-web\\src\\Devices.tsx":"11","C:\\Users\\Marco\\git\\gateway-client-web\\src\\OpenStuderInterface.tsx":"12"},{"size":500,"mtime":1612174867139,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":6172,"mtime":1613056576616,"results":"16","hashOfConfig":"14"},{"size":1490,"mtime":1612519156791,"results":"17","hashOfConfig":"14"},{"size":1605,"mtime":1613057208321,"results":"18","hashOfConfig":"14"},{"size":500,"mtime":1612174867139,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":3016,"mtime":1614083729243,"results":"22","hashOfConfig":"20"},{"size":1605,"mtime":1613057208321,"results":"23","hashOfConfig":"20"},{"size":24632,"mtime":1614077368522,"results":"24","hashOfConfig":"20"},{"size":2588,"mtime":1613382659344,"results":"25","hashOfConfig":"20"},{"size":2997,"mtime":1614077375793,"results":"26","hashOfConfig":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"16hdhh2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"o8738k",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\index.tsx",[],["59","60"],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\reportWebVitals.ts",[],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\App.tsx",["61"],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\Devices.tsx",[],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\DeviceRender.tsx",["62","63","64"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\index.tsx",[],["65","66"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\reportWebVitals.ts",[],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\App.tsx",["67","68","69"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\DeviceRender.tsx",["70","71","72"],"import React from \"react\";\r\n\r\nimport {Device} from \"./Devices\";\r\nimport {DeviceProperty} from \"./Devices\";\r\n\r\ntype DRprops ={\r\n    device:Device,\r\n    subscribeStatus:boolean,\r\n    onClick:(id:number)=>void\r\n}\r\n\r\nclass DeviceRender extends React.Component<DRprops, {}>{\r\n    constructor(props:any) {\r\n        super(props);\r\n    }\r\n\r\n    public onClick(id:number){\r\n        this.props.onClick(id);\r\n    }\r\n\r\n    public render(){\r\n        const propertyRender = this.props.device.properties.map(property =>{\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        {property.id}\r\n                    </td>\r\n                    <td>\r\n                        {property.value}\r\n                    </td>\r\n                    <td>\r\n                        {property.readable}\r\n                    </td>\r\n                    <td>\r\n                        {property.writeable}\r\n                    </td>\r\n                    <td>\r\n                        {property.description}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n        let btnLabel = this.props.subscribeStatus?\"unsubscribe\":\"subscribe\";\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th colSpan={5}>{this.props.device.model}</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                            {propertyRender}\r\n                    </tbody>\r\n                </table>\r\n            </div>)\r\n    }\r\n\r\n}\r\n\r\nexport default DeviceRender;",["73","74"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\SIGatewayClient.tsx",["75","76","77"],"import Devices from \"./Devices\";\r\nimport OpenStuderInterface from \"./OpenStuderInterface\";\r\n\r\nexport enum SIDescriptionFlags{\r\n    INCLUDE_ACCESS_INFORMATION,\r\n    INCLUDE_PROPERTY_INFORMATION,\r\n    INCLUDE_DEVICE_INFORMATION,\r\n    INCLUDE_DRIVER_INFORMATION ,\r\n}\r\n\r\nexport enum SIWriteFlags{\r\n    NONE=0,\r\n    PERMANENT=1,\r\n}\r\n\r\nexport enum SIStatus{\r\n    SUCCESS = 0,\r\n    IN_PROGRESS = 1,\r\n    ERROR = -1,\r\n    NO_PROPERTY = -2,\r\n    NO_DEVICE = -3,\r\n    NO_DEVICE_ACCESS = -4,\r\n    TIMEOUT = -5,\r\n    INVALID_VALUE = -6\r\n}\r\n\r\ntype DecodedFrame={\r\n    command:string,\r\n    body:string,\r\n    headers:Map<string,string>\r\n}\r\n\r\nexport type SIDeviceMessage={\r\n    body?:string,\r\n    status?:string,\r\n    deviceCount?:string,\r\n    id?:string,\r\n    value?:string,\r\n    accessId?:string,\r\n    messageId?:string,\r\n    deviceId?:string,\r\n    message?:string,\r\n    access_level?:string,\r\n    count?:string,\r\n    timestamp?:string,\r\n    gatewayVersion?:string,\r\n}\r\n\r\nclass SIProtocolError{\r\n    static raise(error:string){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport enum SIConnectionState{\r\n    DISCONNECTED,\r\n    CONNECTING,\r\n    AUTHORIZING,\r\n    CONNECTED,\r\n}\r\n\r\nexport enum SIAccessLevel{\r\n    NONE,\r\n    BASIC,\r\n    INSTALLER,\r\n    EXPERT,\r\n    QUALIFIED_SERVICE_PERSONNEL\r\n}\r\n\r\nfunction SIAccessLevelFromString(str:string):SIAccessLevel{\r\n    switch(str){\r\n        case 'None':\r\n            return SIAccessLevel.NONE;\r\n        case 'Basic':\r\n            return SIAccessLevel.BASIC;\r\n        case 'INSTALLER':\r\n            return SIAccessLevel.INSTALLER;\r\n        case 'EXPERT':\r\n            return SIAccessLevel.EXPERT;\r\n        case 'QSP':\r\n            return SIAccessLevel.QUALIFIED_SERVICE_PERSONNEL;\r\n        default:\r\n            return SIAccessLevel.NONE;\r\n    }\r\n}\r\n\r\nclass SIAbstractGatewayClient {\r\n    static decodeFrame(frame:string):DecodedFrame{\r\n        let command:string=\"INVALID\";\r\n        let headers:Map<string,string>=new Map<string, string>();\r\n\r\n        let lines:string[]=frame.split(\"\\n\");\r\n        if(lines.length>1){\r\n            command=lines[0];\r\n        }\r\n\r\n        let line=1;\r\n        while (line<lines.length){\r\n            let components = lines[line].split(\":\");\r\n            if (components.length===2){\r\n                headers.set(components[0],components[1]);\r\n            }\r\n            line +=1;\r\n        }\r\n        line -=1;\r\n        let body = lines[line];\r\n\r\n        let decodedFrame:DecodedFrame={body:body,headers:headers,command:command};\r\n        return decodedFrame;\r\n\r\n    }\r\n\r\n    static encodeAuthorizeFrame(user?:string, password?:string):string{\r\n        if(user===undefined || password === undefined) {\r\n            return \"AUTHORIZE\\nuser:\" + user + \"\\npassword:\" + password + \"\\nprotocol_version:1\\n\\n\";\r\n        }\r\n        else{\r\n            return 'AUTHORIZE\\nprotocol_version:1\\n\\n';\r\n        }\r\n    }\r\n\r\n    static decodeAuthorizedFrame(frame:string):SIDeviceMessage{\r\n        let decodedFrame:DecodedFrame = this.decodeFrame(frame);\r\n        let retVal:SIDeviceMessage= {\r\n            access_level:undefined,\r\n            gatewayVersion:undefined,\r\n        };\r\n\r\n        if(decodedFrame.command===\"AUTHORIZED\" && decodedFrame.headers.has(\"access_level\") &&\r\n            decodedFrame.headers.has(\"protocol_version\")){\r\n            if (decodedFrame.headers.get(\"protocol_version\")===\"1\"){\r\n                retVal.access_level=decodedFrame.headers.get(\"access_level\");\r\n                retVal.gatewayVersion=decodedFrame.headers.get(\"gateway_version\")\r\n                return retVal;\r\n            }\r\n            else{\r\n                SIProtocolError.raise(\"protocol version 1 not supported by server\");\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"Error\" && decodedFrame.headers.has(\"reason\")){\r\n            let reason:string=\"\"+decodedFrame.headers.get(\"reason\");\r\n            SIProtocolError.raise(reason);\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during authorization\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeEnumerateFrame(){\r\n        return \"ENUMERATE\\n\\n\";\r\n    }\r\n\r\n    static decodeEnumerateFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            deviceCount:undefined,\r\n        };\r\n        let decodedFrame:DecodedFrame=this.decodeFrame(frame);\r\n        if(decodedFrame.command===\"ENUMERATED\"){\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.deviceCount=decodedFrame.headers.get(\"device_count\");\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during property read\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeDescribeFrame(deviceAccessId:string|undefined, deviceId:string|undefined,\r\n                               flags:SIDescriptionFlags[]|undefined):string{\r\n        let frame=\"DESCRIBE\\n\";\r\n        if(deviceAccessId){\r\n            frame+=\"id:\"+deviceAccessId;\r\n            if(deviceId){\r\n                frame+=\".\"+deviceId;\r\n            }\r\n            frame+=\"\\n\";\r\n        }\r\n        if(flags?.length!==0 && flags!==undefined){\r\n            frame+=\"flags:\";\r\n            flags?.map(flag =>{\r\n                if (flag === SIDescriptionFlags.INCLUDE_ACCESS_INFORMATION) {\r\n                    frame+=\"IncludeAccessInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_PROPERTY_INFORMATION) {\r\n                    frame+=\"IncludePropertyInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_DEVICE_INFORMATION) {\r\n                    frame+=\"IncludeDeviceInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_DRIVER_INFORMATION) {\r\n                    frame+=\"IncludeDriverInformation,\";\r\n                }\r\n            });\r\n            //Suppress the last ',' or \\n if no flag\r\n            frame = frame.substring(0, frame.length - 1);\r\n            frame+=\"\\n\";\r\n        }\r\n        frame+=\"\\n\";\r\n        return frame;\r\n    }\r\n\r\n    static decodeDescriptionFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            body:undefined,\r\n            status:undefined,\r\n        };\r\n        let decodedFrame:DecodedFrame=this.decodeFrame(frame);\r\n        if(decodedFrame.command===\"DESCRIPTION\" && decodedFrame.headers.has(\"status\")) {\r\n            let status = decodedFrame.headers.get(\"status\");\r\n            retVal.status=status;\r\n            if (status === \"Success\") {\r\n                retVal.body=decodedFrame.body;\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during description\");\r\n        }\r\n        if(decodedFrame.headers.has(\"id\")){\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeReadPropertyFrame(propertyId:string):string{\r\n        return \"READ PROPERTY\\nid:\"+propertyId+\"\\n\\n\";\r\n    }\r\n\r\n    static decodePropertyReadFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n        };\r\n        let decodedFrame:DecodedFrame=this.decodeFrame(frame);\r\n        if(decodedFrame.command===\"PROPERTY READ\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            let status = decodedFrame.headers.get(\"status\");\r\n            retVal.status=status;\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n            if(status===\"Success\" && decodedFrame.headers.has(\"value\")){\r\n                retVal.value=decodedFrame.headers.get(\"value\");\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during property read\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeWritePropertyFrame(propertyId:string, value?:string, flags?:SIWriteFlags):string{\r\n        let frame = \"WRITE PROPERTY\\nid:\" + propertyId + \"\\n\";\r\n        if(flags){\r\n            frame+=\"flags:\";\r\n            if(flags === SIWriteFlags.PERMANENT){\r\n                frame+=\"Permanent\";\r\n            }\r\n            frame+=\"\\n\";\r\n        }\r\n        if(value){\r\n            frame+=\"value:\"+value+\"\\n\";\r\n        }\r\n        frame+=\"\\n\";\r\n        return frame;\r\n    }\r\n\r\n    static decodePropertyWrittenFrame(frame:string):SIDeviceMessage {\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"PROPERTY WRITTEN\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error during property write\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeSubscribePropertyFrame(propertyId:string):string{\r\n        return \"SUBSCRIBE PROPERTY\\nid:\"+propertyId+\"\\n\\n\";\r\n    }\r\n\r\n    static decodePropertySubscribedFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"PROPERTY SUBSCRIBED\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error during property subscribe\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeUnsubscribePropertyFrame(propertyId:string):string{\r\n        return \"UNSUBSCRIBE PROPERTY\\nid:\"+propertyId+\"\\n\\n\";\r\n    }\r\n\r\n    static decodePropertyUnsubscribedFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"PROPERTY UNSUBSCRIBED\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error during property subscribe\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static decodePropertyUpdateFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"PROPERTY UPDATE\" && decodedFrame.headers.has(\"value\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving property update\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeReadDatalogFrame(propertyId:string, dateFrom?:Date, dateTo?:Date, limit?:number){\r\n        let frame:string = 'READ DATALOG\\nid:' + propertyId + '\\n';\r\n        frame += SIAbstractGatewayClient.getTimestampHeader('from',dateFrom);\r\n        frame += SIAbstractGatewayClient.getTimestampHeader('to',dateTo);\r\n        if(limit){\r\n            frame += 'limit'+limit;\r\n        }\r\n        frame += '\\n';\r\n        return frame;\r\n    }\r\n\r\n    static decodeDatalogReadFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n            count:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"DATALOG READ\" && decodedFrame.headers.has(\"status\" )\r\n            && decodedFrame.headers.has(\"id\")&& decodedFrame.headers.has(\"count\"))\r\n        {\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.count=decodedFrame.headers.get(\"count\");\r\n            retVal.body=decodedFrame.body;\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving datalog read\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeReadMessagesFrame(dateFrom?:Date, dateTo?:Date, limit?:number){\r\n        let frame:string = 'READ MESSAGES\\n';\r\n        frame += SIAbstractGatewayClient.getTimestampHeader('from',dateFrom);\r\n        frame += SIAbstractGatewayClient.getTimestampHeader('to',dateTo);\r\n        if(limit){\r\n            frame += 'limit:'+limit;\r\n        }\r\n        frame += '\\n';\r\n        return frame;\r\n    }\r\n\r\n    static decodeMessagesReadFrame(frame:string):SIDeviceMessage[]{\r\n        let retVal:SIDeviceMessage[]=[];\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"MESSAGES READ\" && decodedFrame.headers.has(\"status\" )\r\n            && decodedFrame.headers.has(\"count\"))\r\n        {\r\n            retVal=JSON.parse(decodedFrame.body);\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving messages\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static decodeDeviceMessageFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            id:undefined,\r\n            accessId:undefined,\r\n            messageId:undefined,\r\n            message:undefined,\r\n            timestamp:undefined,\r\n            };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"DEVICE MESSAGE\" && decodedFrame.headers.has(\"access_id\")\r\n            && decodedFrame.headers.has(\"device_id\")&& decodedFrame.headers.has(\"message_id\")&&\r\n            decodedFrame.headers.has(\"message\") && decodedFrame.headers.has(\"timestamp\"))\r\n        {\r\n            retVal.accessId=decodedFrame.headers.get(\"access_id\");\r\n            retVal.messageId=decodedFrame.headers.get(\"message_id\");\r\n            retVal.message=decodedFrame.headers.get(\"message\");\r\n            retVal.deviceId=decodedFrame.headers.get(\"device_id\");\r\n            retVal.timestamp=decodedFrame.headers.get(\"timestamp\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving device message\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static getTimestampHeader(key:string, timestamp?:Date):string{\r\n        if(timestamp){\r\n            return key + ':' + timestamp.toISOString();\r\n        }\r\n        else{\r\n            return '';\r\n        }\r\n    }\r\n    //Get the command of the frame received\r\n    static peekFrameCommand(frame:string):string{\r\n        //Return the first line of the received frame\r\n        return (frame.split(\"\\n\"))[0];\r\n    }\r\n}\r\n\r\nclass SIGatewayClient extends SIAbstractGatewayClient{\r\n    //Attributes\r\n    state: SIConnectionState;\r\n    accessLevel: SIAccessLevel;\r\n    gatewayVersion: string;\r\n    ws:WebSocket|null;\r\n    deviceCount:number;\r\n    osi:OpenStuderInterface;\r\n\r\n    public constructor(osi:OpenStuderInterface){\r\n        super();\r\n        this.state = SIConnectionState.DISCONNECTED;\r\n        this.gatewayVersion='';\r\n        this.accessLevel=SIAccessLevel.NONE;\r\n        this.deviceCount=0;\r\n        this.ws=null;\r\n        this.osi=osi;\r\n    }\r\n\r\n    public connect(host:string,port:number = 1987,user?:string,password?:string ) {\r\n        this.ensureInState(SIConnectionState.DISCONNECTED);\r\n        this.ws = new WebSocket(host + ':' + port);\r\n        this.setStateSI(SIConnectionState.CONNECTING);\r\n        this.ws.onopen = (event:Event)=>{\r\n          this.setStateSI(SIConnectionState.AUTHORIZING);\r\n          let frame = SIGatewayClient.encodeAuthorizeFrame(user,password);\r\n          if(this.ws){\r\n              this.ws.send(frame);\r\n          }\r\n        };\r\n        this.ws.onmessage = (event:MessageEvent)=>{\r\n            let command: string = SIGatewayClient.peekFrameCommand(event.data);\r\n            let frame:string=\"\";\r\n            let receivedMessage:SIDeviceMessage;\r\n            let receivedMessagesRead:SIDeviceMessage[];\r\n            if(this.state===SIConnectionState.AUTHORIZING && command ===\"AUTHORIZED\"){\r\n                this.setStateSI(SIConnectionState.CONNECTED);\r\n                let flags: SIDescriptionFlags[] = [SIDescriptionFlags.INCLUDE_PROPERTY_INFORMATION, SIDescriptionFlags.INCLUDE_ACCESS_INFORMATION,\r\n                    SIDescriptionFlags.INCLUDE_DEVICE_INFORMATION, SIDescriptionFlags.INCLUDE_DRIVER_INFORMATION];\r\n                frame = SIGatewayClient.encodeDescribeFrame(undefined, undefined, flags);\r\n                if(this.ws) {\r\n                    this.ws.send(frame);\r\n                }\r\n            }\r\n            else if(this.state===SIConnectionState.CONNECTED){\r\n                switch (command) {\r\n                    case \"ERROR\":\r\n                        SIProtocolError.raise(\"\"+SIGatewayClient.decodeFrame(event.data).headers.get(\"reason\"));\r\n                        break;\r\n                    case \"ENUMERATED\":\r\n                        receivedMessage = SIGatewayClient.decodeEnumerateFrame(event.data);\r\n                        if(receivedMessage.deviceCount) {\r\n                            this.deviceCount = +receivedMessage.deviceCount;\r\n                        }\r\n                        this.osi.onEnumerateCallback(receivedMessage);\r\n                        break;\r\n                    case \"DESCRIPTION\":\r\n                        receivedMessage = SIGatewayClient.decodeDescriptionFrame(event.data);\r\n                        this.osi.onDescriptionCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY READ\":\r\n                        receivedMessage = SIGatewayClient.decodePropertyReadFrame(event.data);\r\n                        this.osi.onPropertyReadCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY WRITTEN\":\r\n                        receivedMessage = SIGatewayClient.decodePropertyWrittenFrame(event.data);\r\n                        this.osi.onPropertyWrittenCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY SUBSCRIBED\":\r\n                        receivedMessage = SIGatewayClient.decodePropertySubscribedFrame(event.data);\r\n                        this.osi.onPropertySubscribeCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY UNSUBSCRIBED\":\r\n                        receivedMessage = SIGatewayClient.decodePropertyUnsubscribedFrame(event.data);\r\n                        this.osi.onPropertyUnsubscribeCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY UPDATE\":\r\n                        receivedMessage = SIGatewayClient.decodePropertyUpdateFrame(event.data);\r\n                        this.osi.onPropertyUpdateCallback(receivedMessage);\r\n                        break;\r\n                    case \"DATALOG READ\":\r\n                        receivedMessage = SIGatewayClient.decodeDatalogReadFrame(event.data);\r\n                        this.osi.onDatalogReadCallback(receivedMessage);\r\n                        break;\r\n                    case \"DEVICE MESSAGE\":\r\n                        receivedMessage = SIGatewayClient.decodeDeviceMessageFrame(event.data);\r\n                        this.osi.onDeviceMessageCallback(receivedMessage);\r\n                        break;\r\n                    case \"MESSAGES READ\":\r\n                        receivedMessagesRead = SIGatewayClient.decodeMessagesReadFrame(event.data);\r\n                        this.osi.onMessageReadCallback(receivedMessagesRead);\r\n                        break;\r\n                    default:\r\n                        SIProtocolError.raise(\"unsupported frame command :\"+command);\r\n                }\r\n            }\r\n        }\r\n        this.ws.onclose = (event:Event)=>{\r\n            this.setStateSI(SIConnectionState.DISCONNECTED);\r\n            this.accessLevel = SIAccessLevel.NONE;\r\n        }\r\n        this.ws.onerror = (event:Event)=>{\r\n            SIProtocolError.raise(\"Error occurs on the websocket\");\r\n        }\r\n    }\r\n\r\n    public getState():SIConnectionState{\r\n        return this.state;\r\n    }\r\n\r\n    public getAccessLevel():SIAccessLevel{\r\n        return this.accessLevel;\r\n    }\r\n\r\n    public getGatewayVersion():string{\r\n        return this.gatewayVersion;\r\n    }\r\n\r\n    public enumerate(){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeEnumerateFrame());\r\n        }\r\n    }\r\n\r\n    public describe(deviceAccessId:string, deviceId?:string,flags?:SIDescriptionFlags[]){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeDescribeFrame(deviceAccessId,deviceId,flags));\r\n        }\r\n    }\r\n\r\n    public readProperty(propertyId:string){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeReadPropertyFrame(propertyId));\r\n        }\r\n    }\r\n\r\n    public writeProperty(propertyId:string,value?:any){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeWritePropertyFrame(propertyId,value));\r\n        }\r\n    }\r\n\r\n    public subscribeProperty(propertyId:string){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeSubscribePropertyFrame(propertyId));\r\n        }\r\n    }\r\n\r\n    public unsubscribeFromProperty(propertyId:string){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeUnsubscribePropertyFrame(propertyId));\r\n        }\r\n    }\r\n\r\n    public readDatalog(propertyId:string,dateFrom?:Date,dateTo?:Date,limit?:number){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeReadDatalogFrame(propertyId,dateFrom, dateTo, limit));\r\n        }\r\n    }\r\n\r\n    public readMessages(dateFrom?:Date, dateTo?:Date, limit?:number){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeReadMessagesFrame(dateFrom, dateTo, limit));\r\n        }\r\n    }\r\n\r\n    public disconnect(){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.close();\r\n        }\r\n    }\r\n\r\n    public ensureInState(state:SIConnectionState){\r\n        if(state!==this.state){\r\n            SIProtocolError.raise(\"invalid client state\");\r\n        }\r\n    }\r\n\r\n    public setStateSI(state:SIConnectionState){\r\n        this.state=state;\r\n        this.osi.onChangeConnectionState(this.state);\r\n    }\r\n\r\n}\r\n\r\nexport default SIGatewayClient;\r\n\r\n//SINGLETON PATTERN\r\n/*\r\nprivate static appInstance:SIGatewayClient;\r\npublic static getInstance():SIGatewayClient{\r\n    if(!SIGatewayClient.appInstance){\r\n        SIGatewayClient.appInstance= new SIGatewayClient();\r\n    }\r\n    return SIGatewayClient.appInstance;\r\n}\r\n*/","C:\\Users\\Marco\\git\\gateway-client-web\\src\\Devices.tsx",["78","79"],"export type DeviceProperty = {\r\n    value: string|undefined,\r\n    id: number,\r\n    description: string,\r\n    readable: boolean,\r\n    writeable: boolean,\r\n    type: string,\r\n    unit: string,\r\n}\r\n\r\nexport type Device = {\r\n    model: string,\r\n    properties: DeviceProperty[],\r\n    id: number,\r\n}\r\n\r\nclass Devices{\r\n    devices: Device[];\r\n    constructor() {\r\n        this.devices=[];\r\n    }\r\n    public jsonToDevices(json:string){\r\n        let pJSON = JSON.parse(json);\r\n        let instances = pJSON.instances;\r\n        if(instances) {\r\n            let devicesList = instances[0].devices;\r\n            let tempDevices: Device[] = [];\r\n            for (const elementDevice of devicesList) {\r\n                let tempDevice: Device = {model: elementDevice.model, properties: [], id: elementDevice.id};\r\n                for (const elementProperty of elementDevice.properties) {\r\n                    let tempProperty: DeviceProperty = {\r\n                        value: undefined,\r\n                        id: elementProperty.id,\r\n                        description: elementProperty.description,\r\n                        readable: elementProperty.readable,\r\n                        writeable: elementProperty.writeable,\r\n                        type: elementProperty.type,\r\n                        unit: elementProperty.unit\r\n                    };\r\n                    tempDevice.properties.push(tempProperty);\r\n                }\r\n                tempDevices.push(tempDevice);\r\n            }\r\n            this.devices=tempDevices;\r\n        }\r\n        else{\r\n            this.devices=[];\r\n        }\r\n    }\r\n\r\n    public findDevice(id:number):Device|undefined{\r\n        this.devices.map(device=>{\r\n           if(id===device.id){\r\n               return device;\r\n           }\r\n        });\r\n        return undefined;\r\n    }\r\n\r\n    public hasDevice(id:number):boolean{\r\n        if(this.findDevice(id)!==undefined){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    public findProperty(idDevice:number, idProperty:number):DeviceProperty|undefined{\r\n        let device = this.findDevice(idDevice);\r\n        if(device!==undefined){\r\n            device.properties.map(property=>{\r\n                if(property.id===idProperty){\r\n                    return property;\r\n                }\r\n            });\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public hasProperty(idDevice:number, idProperty:number):boolean{\r\n        if(this.findProperty(idDevice,idProperty)!==undefined){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default Devices;","C:\\Users\\Marco\\git\\gateway-client-web\\src\\OpenStuderInterface.tsx",["80","81"],"import SIGatewayClient, {SIAccessLevel, SIConnectionState, SIDescriptionFlags, SIDeviceMessage} from \"./SIGatewayClient\"\r\n\r\nimport Devices from \"./Devices\"\r\nimport DeviceRender from \"./DeviceRender\";\r\n\r\nclass OpenStuderInterface{\r\n    host:string;\r\n    port:number;\r\n    user?:string;\r\n    password?:string;\r\n    sigc:SIGatewayClient;\r\n    public constructor(host:string,port:number=1987, user?:string, password?:string){\r\n        this.host=host;\r\n        this.port=port;\r\n        this.user=user;\r\n        this.password=password;\r\n        this.sigc = new SIGatewayClient(this);\r\n    }\r\n    public connect(){\r\n        this.sigc.connect(this.host,this.port, this.user,this.password);\r\n    }\r\n\r\n    public getConnectionState():SIConnectionState{\r\n        return this.sigc.getState();\r\n    }\r\n\r\n    public getAccessLevel():SIAccessLevel{\r\n        return this.sigc.getAccessLevel();\r\n    }\r\n\r\n    public getGatewayVersion():string{\r\n        return this.sigc.getGatewayVersion();\r\n    }\r\n\r\n    public enumerate(){\r\n        this.sigc.enumerate();\r\n    }\r\n\r\n    public describe(deviceAccessId:string, deviceId?:string,flags?:SIDescriptionFlags[]){\r\n        this.sigc.describe(deviceAccessId,deviceId,flags);\r\n    }\r\n\r\n    public readProperty(propertyId:string){\r\n        this.sigc.readProperty(propertyId);\r\n    }\r\n\r\n    public writeProperty(propertyId:string,value?:any){\r\n        this.sigc.writeProperty(propertyId,value);\r\n    }\r\n\r\n    public subscribeProperty(propertyId:string){\r\n        this.sigc.subscribeProperty(propertyId);\r\n    }\r\n\r\n    public unsubscribeFromProperty(propertyId:string){\r\n        this.sigc.unsubscribeFromProperty(propertyId);\r\n    }\r\n\r\n    public readDatalog(propertyId:string,dateFrom?:Date,dateTo?:Date,limit?:number){\r\n        this.sigc.readDatalog(propertyId,dateFrom,dateTo,limit);\r\n    }\r\n\r\n    public readMessages(dateFrom?:Date, dateTo?:Date, limit?:number){\r\n        this.sigc.readMessages(dateFrom,dateTo,limit);\r\n    }\r\n\r\n    public disconnect(){\r\n        this.sigc.disconnect();\r\n    }\r\n\r\n    public onChangeConnectionState(state:SIConnectionState){\r\n\r\n    }\r\n\r\n    public onEnumerateCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onErrorCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n    public onDescriptionCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onPropertyReadCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onPropertyWrittenCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onPropertySubscribeCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onPropertyUnsubscribeCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onPropertyUpdateCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onDatalogReadCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onDeviceMessageCallback(deviceMessage:SIDeviceMessage){\r\n\r\n    }\r\n\r\n    public onMessageReadCallback(devicesMessage:SIDeviceMessage[]){\r\n\r\n    }\r\n}\r\n\r\nexport default OpenStuderInterface;",["82","83"],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":84,"column":15,"nodeType":"90","messageId":"91","endLine":84,"endColumn":44},{"ruleId":"88","severity":1,"message":"92","line":4,"column":9,"nodeType":"90","messageId":"91","endLine":4,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":13,"column":5,"nodeType":"95","messageId":"96","endLine":15,"endColumn":6},{"ruleId":"88","severity":1,"message":"97","line":43,"column":13,"nodeType":"90","messageId":"91","endLine":43,"endColumn":21},{"ruleId":"84","replacedBy":"98"},{"ruleId":"86","replacedBy":"99"},{"ruleId":"88","severity":1,"message":"100","line":8,"column":8,"nodeType":"90","messageId":"91","endLine":8,"endColumn":15},{"ruleId":"88","severity":1,"message":"101","line":9,"column":8,"nodeType":"90","messageId":"91","endLine":9,"endColumn":20},{"ruleId":"88","severity":1,"message":"102","line":12,"column":5,"nodeType":"90","messageId":"91","endLine":12,"endColumn":8},{"ruleId":"88","severity":1,"message":"92","line":4,"column":9,"nodeType":"90","messageId":"91","endLine":4,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":13,"column":5,"nodeType":"95","messageId":"96","endLine":15,"endColumn":6},{"ruleId":"88","severity":1,"message":"97","line":43,"column":13,"nodeType":"90","messageId":"91","endLine":43,"endColumn":21},{"ruleId":"84","replacedBy":"103"},{"ruleId":"86","replacedBy":"104"},{"ruleId":"88","severity":1,"message":"100","line":1,"column":8,"nodeType":"90","messageId":"91","endLine":1,"endColumn":15},{"ruleId":"88","severity":1,"message":"105","line":70,"column":10,"nodeType":"90","messageId":"91","endLine":70,"endColumn":33},{"ruleId":"106","severity":1,"message":"107","line":185,"column":29,"nodeType":"108","messageId":"109","endLine":185,"endColumn":31},{"ruleId":"106","severity":1,"message":"110","line":52,"column":32,"nodeType":"108","messageId":"111","endLine":52,"endColumn":34},{"ruleId":"106","severity":1,"message":"110","line":69,"column":43,"nodeType":"108","messageId":"111","endLine":69,"endColumn":45},{"ruleId":"88","severity":1,"message":"100","line":3,"column":8,"nodeType":"90","messageId":"91","endLine":3,"endColumn":15},{"ruleId":"88","severity":1,"message":"101","line":4,"column":8,"nodeType":"90","messageId":"91","endLine":4,"endColumn":20},{"ruleId":"84","replacedBy":"112"},{"ruleId":"86","replacedBy":"113"},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"@typescript-eslint/no-unused-vars","'responseSubscription' is assigned a value but never used.","Identifier","unusedVar","'DeviceProperty' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'btnLabel' is assigned a value but never used.",["114"],["115"],"'Devices' is defined but never used.","'DeviceRender' is defined but never used.","'oui' is defined but never used.",["114"],["115"],"'SIAccessLevelFromString' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd",["114"],["115"],"no-global-assign","no-unsafe-negation"]