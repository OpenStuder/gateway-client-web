[{"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\index.tsx":"1","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\reportWebVitals.ts":"2","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\App.tsx":"3","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\SIAbstractGatewayClient.tsx":"4","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\Devices.tsx":"5","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\DeviceRender.tsx":"6","C:\\Users\\Marco\\git\\gateway-client-web\\src\\index.tsx":"7","C:\\Users\\Marco\\git\\gateway-client-web\\src\\reportWebVitals.ts":"8","C:\\Users\\Marco\\git\\gateway-client-web\\src\\App.tsx":"9","C:\\Users\\Marco\\git\\gateway-client-web\\src\\DeviceRender.tsx":"10","C:\\Users\\Marco\\git\\gateway-client-web\\src\\SIAbstractGatewayClient.tsx":"11","C:\\Users\\Marco\\git\\gateway-client-web\\src\\Devices.tsx":"12"},{"size":500,"mtime":1612174867139,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":6172,"mtime":1613056576616,"results":"16","hashOfConfig":"14"},{"size":12473,"mtime":1613033917147,"results":"17","hashOfConfig":"14"},{"size":1490,"mtime":1612519156791,"results":"18","hashOfConfig":"14"},{"size":1605,"mtime":1613057208321,"results":"19","hashOfConfig":"14"},{"size":500,"mtime":1612174867139,"results":"20","hashOfConfig":"21"},{"size":425,"mtime":499162500000,"results":"22","hashOfConfig":"21"},{"size":6172,"mtime":1613378097461,"results":"23","hashOfConfig":"21"},{"size":1605,"mtime":1613057208321,"results":"24","hashOfConfig":"21"},{"size":12473,"mtime":1613033917147,"results":"25","hashOfConfig":"21"},{"size":1632,"mtime":1613373195059,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"16hdhh2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"o8738k",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\index.tsx",[],["57","58"],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\reportWebVitals.ts",[],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\App.tsx",["59"],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\SIAbstractGatewayClient.tsx",["60"],"export enum SIDescriptionFlags{\r\n    INCLUDE_ACCESS_INFORMATION,\r\n    INCLUDE_PROPERTY_INFORMATION,\r\n    INCLUDE_DEVICE_INFORMATION,\r\n    INCLUDE_DRIVER_INFORMATION ,\r\n}\r\n\r\ntype DecodedFrame={\r\n    command:string,\r\n    body:string,\r\n    headers:Map<string,string>\r\n}\r\n\r\nexport type Response={\r\n    description:string|undefined,\r\n    status:string|undefined,\r\n    device_count:string|undefined,\r\n    id:string|undefined,\r\n    value:string|undefined,\r\n    access_id:string|undefined,\r\n    message_id:string|undefined,\r\n    message:string|undefined,\r\n    access_level:string|undefined\r\n}\r\n\r\nclass SIProtocolError{\r\n    static raise(error:string){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nclass SIAbstractGatewayClient {\r\n    static decode_frame(frame:string):DecodedFrame{\r\n        let command:string=\"INVALID\";\r\n        let headers:Map<string,string>=new Map<string, string>();\r\n\r\n        let lines:string[]=frame.split(\"\\n\");\r\n        if(lines.length>1){\r\n            command=lines[0];\r\n        }\r\n\r\n        let line=1;\r\n        while (line<lines.length){\r\n            let components = lines[line].split(\":\");\r\n            if (components.length===2){\r\n                headers.set(components[0],components[1]);\r\n            }\r\n            line +=1;\r\n        }\r\n        line -=1;\r\n        let body = lines[line];\r\n\r\n        let decodedFrame:DecodedFrame={body:body,headers:headers,command:command};\r\n        return decodedFrame;\r\n\r\n    }\r\n\r\n    static encode_authorize_frame(user:string,password:string):string{\r\n        return \"AUTHORIZE\\nuser:\"+user+\"\\npassword:\"+password+\"\\nprotocol_version:1\\n\\n\";\r\n    }\r\n\r\n    static decode_authorized_frame(frame:string):Response{\r\n        let decodedFrame:DecodedFrame = this.decode_frame(frame);\r\n        let retVal:Response= {\r\n            description:undefined,\r\n            status:undefined,\r\n            device_count:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n            access_id:undefined,\r\n            message_id:undefined,\r\n            message:undefined,\r\n            access_level:undefined};\r\n\r\n        if(decodedFrame.command===\"AUTHORIZED\" && decodedFrame.headers.has(\"access_level\") &&\r\n            decodedFrame.headers.has(\"protocol_version\")){\r\n            if (decodedFrame.headers.get(\"protocol_version\")===\"1\"){\r\n                retVal.access_level=decodedFrame.headers.get(\"access_level\");\r\n                return retVal;\r\n            }\r\n            else{\r\n                SIProtocolError.raise(\"protocol version 1 not supported by server\");\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"Error\" && decodedFrame.headers.has(\"reason\")){\r\n            let reason:string=\"\"+decodedFrame.headers.get(\"reason\");\r\n            SIProtocolError.raise(reason);\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during authorization\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encode_enumerate_frame(){\r\n        return \"ENUMERATE\\n\\n\";\r\n    }\r\n\r\n    static decode_enumerate_frame(frame:string):Response{\r\n        let retVal:Response= {\r\n            description:undefined,\r\n            status:undefined,\r\n            device_count:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n            access_id:undefined,\r\n            message_id:undefined,\r\n            message:undefined,\r\n            access_level:undefined};\r\n        let decodedFrame:DecodedFrame=this.decode_frame(frame);\r\n        if(decodedFrame.command===\"ENUMERATED\"){\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.device_count=decodedFrame.headers.get(\"device_count\");\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during property read\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encode_describe_frame(device_access_id:string|undefined,device_id:string|undefined,\r\n                                 flags:SIDescriptionFlags[]|undefined):string{\r\n        let frame=\"DESCRIBE\\n\";\r\n        if(flags?.length!==0 && flags!==undefined){\r\n            frame+=\"flags:\";\r\n            flags?.map(flag =>{\r\n                if (flag === SIDescriptionFlags.INCLUDE_ACCESS_INFORMATION) {\r\n                    frame+=\"IncludeAccessInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_PROPERTY_INFORMATION) {\r\n                    frame+=\"IncludePropertyInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_DEVICE_INFORMATION) {\r\n                    frame+=\"IncludeDeviceInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_DRIVER_INFORMATION) {\r\n                    frame+=\"IncludeDriverInformation,\";\r\n                }\r\n            });\r\n            //Suppress the last ',' or \\n if no flag\r\n            frame = frame.substring(0, frame.length - 1);\r\n            frame+=\"\\n\";\r\n        }\r\n        if(device_access_id){\r\n            frame+=\"id:\"+device_access_id;\r\n            if(device_id){\r\n                frame+=\".\"+device_id;\r\n            }\r\n            frame+=\"\\n\";\r\n        }\r\n        frame+=\"\\n\";\r\n        return frame;\r\n    }\r\n\r\n    static decode_description_frame(frame:string):Response{\r\n        let retVal:Response= {\r\n            description:undefined,\r\n            status:undefined,\r\n            device_count:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n            access_id:undefined,\r\n            message_id:undefined,\r\n            message:undefined,\r\n            access_level:undefined};\r\n        let decodedFrame:DecodedFrame=this.decode_frame(frame);\r\n        if(decodedFrame.command===\"DESCRIPTION\" && decodedFrame.headers.has(\"status\")) {\r\n            let status = decodedFrame.headers.get(\"status\");\r\n            retVal.status=status;\r\n            if (status === \"Success\") {\r\n                retVal.description=decodedFrame.body;\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during description\");\r\n        }\r\n        if(decodedFrame.headers.has(\"id\")){\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encode_read_property_frame(property_id:string):string{\r\n        return \"READ PROPERTY\\nid:\"+property_id+\"\\n\\n\";\r\n    }\r\n\r\n    static decode_property_read_frame(frame:string):Response{\r\n        let retVal:Response= {\r\n            description:undefined,\r\n            status:undefined,\r\n            device_count:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n            access_id:undefined,\r\n            message_id:undefined,\r\n            message:undefined,\r\n            access_level:undefined};\r\n        let decodedFrame:DecodedFrame=this.decode_frame(frame);\r\n        if(decodedFrame.command===\"PROPERTY READ\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            let status = decodedFrame.headers.get(\"status\");\r\n            retVal.status=status;\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n            if(status===\"Success\" && decodedFrame.headers.has(\"value\")){\r\n                retVal.value=decodedFrame.headers.get(\"value\");\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during property read\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encode_write_property_frame(property_id:string,value?:string):string{\r\n        let frame = \"WRITE PROPERTY\\nid:\" + property_id + \"\\n\";\r\n        if(value){\r\n            frame+=\"value:\"+value+\"\\n\";\r\n        }\r\n        frame+=\"\\n\";\r\n        return frame;\r\n    }\r\n\r\n    static decode_property_written_frame(frame:string):Response {\r\n        let retVal:Response= {\r\n            description:undefined,\r\n            status:undefined,\r\n            device_count:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n            access_id:undefined,\r\n            message_id:undefined,\r\n            message:undefined,\r\n            access_level:undefined};\r\n        let decodedFrame: DecodedFrame = this.decode_frame(frame);\r\n        if (decodedFrame.command === \"PROPERTY WRITTEN\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error during property write\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encode_subscribe_property_frame(property_id:string):string{\r\n        return \"SUBSCRIBE PROPERTY\\nid:\"+property_id+\"\\n\\n\";\r\n    }\r\n\r\n    static decode_property_subscribed_frame(frame:string):Response{\r\n        let retVal:Response= {\r\n            description:undefined,\r\n            status:undefined,\r\n            device_count:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n            access_id:undefined,\r\n            message_id:undefined,\r\n            message:undefined,\r\n            access_level:undefined};\r\n        let decodedFrame: DecodedFrame = this.decode_frame(frame);\r\n        if (decodedFrame.command === \"PROPERTY SUBSCRIBED\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error during property subscribe\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static decode_property_update_frame(frame:string):Response{\r\n        let retVal:Response= {\r\n            description:undefined,\r\n            status:undefined,\r\n            device_count:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n            access_id:undefined,\r\n            message_id:undefined,\r\n            message:undefined,\r\n            access_level:undefined};\r\n        let decodedFrame: DecodedFrame = this.decode_frame(frame);\r\n        if (decodedFrame.command === \"PROPERTY UPDATE\" && decodedFrame.headers.has(\"value\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving property update\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static decode_device_message_frame(frame:string):Response{\r\n        let retVal:Response= {description:undefined,\r\n            status:undefined,\r\n            device_count:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n            access_id:undefined,\r\n            message_id:undefined,\r\n            message:undefined,\r\n            access_level:undefined};\r\n        let decodedFrame: DecodedFrame = this.decode_frame(frame);\r\n        if (decodedFrame.command === \"DEVICE MESSAGE\" && decodedFrame.headers.has(\"access_id\")\r\n            && decodedFrame.headers.has(\"device_id\")&& decodedFrame.headers.has(\"message_id\")&&\r\n            decodedFrame.headers.has(\"message\")) {\r\n            retVal.access_id=decodedFrame.headers.get(\"access_id\");\r\n            retVal.message_id=decodedFrame.headers.get(\"message_id\");\r\n            retVal.message=decodedFrame.headers.get(\"message\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving device message\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static peek_frame_command(frame:string):string{\r\n        return (frame.split(\"\\n\"))[0];\r\n    }\r\n}\r\n\r\nexport default SIAbstractGatewayClient;","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\Devices.tsx",[],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\DeviceRender.tsx",["61","62","63"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\index.tsx",[],["64","65"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\reportWebVitals.ts",[],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\App.tsx",["66"],"import React from 'react';\nimport './App.css';\n\nimport logo from \"./logo-studer.png\"\n\nimport SIAbstractGatewayClient, {SIDescriptionFlags} from \"./SIAbstractGatewayClient\"\nimport {Response} from \"./SIAbstractGatewayClient\"\n\nimport Devices from \"./Devices\"\nimport DeviceRender from \"./DeviceRender\";\n\nenum SIConnectionState{\n  DISCONNECTED,\n  CONNECTING,\n  AUTHORIZING,\n  CONNECTED,\n}\n\ntype AppProps={\n\n}\n\ntype AppState={\n  testAuthorize:string,\n  testEnumerate:string,\n  testRead:string,\n  testDescription:string,\n  devices:Devices,\n  stateSI:SIConnectionState;\n}\n\nlet ws:WebSocket;\n\nclass App extends React.Component<AppProps, AppState> {\n  //SINGLETON PATTERN\n  private static appInstance:App;\n  public static getInstance():App{\n    if(!App.appInstance){\n      App.appInstance= new App({});\n    }\n    return App.appInstance;\n  }\n\n  constructor(props:any) {\n    super(props);\n    this.state={testAuthorize:\"-\",testEnumerate:\"-\",testRead:\"-\",testDescription:\"-\",\n      devices:new Devices(),stateSI:SIConnectionState.DISCONNECTED};\n  }\n\n  public componentDidMount(){\n    ws=new WebSocket('ws://153.109.24.113:1987');\n    this.setStateSI(SIConnectionState.CONNECTING);\n    let frame:string;\n    ws.onmessage = (evt: MessageEvent)=>{\n      let command:string = SIAbstractGatewayClient.peek_frame_command(evt.data);\n      this.setState({testDescription:evt.data});\n      switch(command){\n        case \"AUTHORIZED\":\n          this.setStateSI(SIConnectionState.CONNECTED);\n          this.setState({testAuthorize:\"\"+SIAbstractGatewayClient.decode_authorized_frame(evt.data)});\n          frame = SIAbstractGatewayClient.encode_enumerate_frame();\n          ws.send(frame);\n        break;\n        case \"ENUMERATED\":\n          this.setState({testEnumerate:\"\"+SIAbstractGatewayClient.decode_enumerate_frame(evt.data).device_count});\n          let flags:SIDescriptionFlags[]=[SIDescriptionFlags.INCLUDE_PROPERTY_INFORMATION,SIDescriptionFlags.INCLUDE_ACCESS_INFORMATION,\n          SIDescriptionFlags.INCLUDE_DEVICE_INFORMATION,SIDescriptionFlags.INCLUDE_DRIVER_INFORMATION];\n          frame = SIAbstractGatewayClient.encode_describe_frame(undefined,undefined,flags);\n          ws.send(frame);\n          break;\n        case \"PROPERTY READ\":\n          let responseProperty:Response = SIAbstractGatewayClient.decode_property_read_frame(evt.data);\n          this.setState({testRead:\"\"+responseProperty.value});\n          break;\n        case \"DESCRIPTION\":\n          let responseDescription:Response = SIAbstractGatewayClient.decode_description_frame(evt.data);\n          let devicesTemp:Devices=new Devices();\n          devicesTemp.jsonToDevices(\"\"+responseDescription.description);\n          this.setState({testDescription:\"\"+responseDescription.description,devices:devicesTemp});\n          frame= SIAbstractGatewayClient.encode_subscribe_property_frame(\"xcom.11.3000\");\n          ws.send(frame);\n          break;\n        case \"PROPERTY SUBSCRIBED\":\n          let responseSubscription:Response = SIAbstractGatewayClient.decode_property_subscribed_frame(evt.data);\n          break;\n      }\n    };\n    ws.onopen = function (event) {\n      let frame = SIAbstractGatewayClient.encode_authorize_frame(\"expert\",\"expert\");\n      App.getInstance().setStateSI(SIConnectionState.AUTHORIZING);\n      ws.send(frame);\n    };\n  }\n\n  public setStateSI(state:SIConnectionState){\n    this.setState({stateSI:state});\n  }\n\n  public onClick(){\n    let frame = SIAbstractGatewayClient.encode_read_property_frame(\"xcom.10.3023\");\n    ws.send(frame);\n  }\n\n  public onSubscribeClick(){\n\n  }\n\n  public renderConnecting(){\n    return(\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"Title\">\n              <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span></div>\n            </h1>\n            <p>Connecting...</p>\n          </header>\n        </div>\n    );\n  }\n\n  public renderDisconnected(){\n    return(\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"Title\">\n              <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span></div>\n            </h1>\n            <p>Disconnected.</p>\n          </header>\n        </div>\n    );\n  }\n\n  public renderAuthorizing(){\n    return(\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"Title\">\n              <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span></div>\n            </h1>\n            <p>Authorizing...</p>\n          </header>\n        </div>\n    );\n  }\n\n  public renderConnected(){\n    const deviceRender = this.state.devices.devices.map(device =>{\n      return(\n          <DeviceRender device={device} subscribeStatus={false} onClick={this.onSubscribeClick}/>\n      );\n    });\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"Title\">\n              <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span></div>\n            </h1>\n            <p>Protocol version : {this.state.testAuthorize}</p>\n            <p>Device count : {this.state.testEnumerate}</p>\n            <button onClick={()=>this.onClick()}>Read command</button>\n            <p>Read value : {this.state.testRead}</p>\n            <p>Last message is : {this.state.testDescription}</p>\n            <p>{deviceRender}</p>\n          </header>\n        </div>\n    );\n  }\n\n  public render() {\n    switch (this.state.stateSI){\n      case SIConnectionState.DISCONNECTED:\n        return(\n            <div>\n              {this.renderDisconnected()}\n            </div>\n        );\n      case SIConnectionState.CONNECTING:\n        return(\n            <div>\n              {this.renderConnecting()}\n            </div>\n        );\n      case SIConnectionState.AUTHORIZING:\n        return(\n            <div>\n              {this.renderAuthorizing()}\n            </div>\n        );\n      case SIConnectionState.CONNECTED:\n        return(\n            <div>\n              {this.renderConnected()}\n            </div>\n        );\n    }\n  }\n}\n\nexport default App;","C:\\Users\\Marco\\git\\gateway-client-web\\src\\DeviceRender.tsx",["67","68","69"],"import React from \"react\";\r\n\r\nimport {Device} from \"./Devices\";\r\nimport {DeviceProperty} from \"./Devices\";\r\n\r\ntype DRprops ={\r\n    device:Device,\r\n    subscribeStatus:boolean,\r\n    onClick:(id:number)=>void\r\n}\r\n\r\nclass DeviceRender extends React.Component<DRprops, {}>{\r\n    constructor(props:any) {\r\n        super(props);\r\n    }\r\n\r\n    public onClick(id:number){\r\n        this.props.onClick(id);\r\n    }\r\n\r\n    public render(){\r\n        const propertyRender = this.props.device.properties.map(property =>{\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        {property.id}\r\n                    </td>\r\n                    <td>\r\n                        {property.value}\r\n                    </td>\r\n                    <td>\r\n                        {property.readable}\r\n                    </td>\r\n                    <td>\r\n                        {property.writeable}\r\n                    </td>\r\n                    <td>\r\n                        {property.description}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n        let btnLabel = this.props.subscribeStatus?\"unsubscribe\":\"subscribe\";\r\n        return(\r\n            <div>\r\n                <table>\r\n                    <thead>\r\n                    <tr>\r\n                        <th colSpan={5}>{this.props.device.model}</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                            {propertyRender}\r\n                    </tbody>\r\n                </table>\r\n            </div>)\r\n    }\r\n\r\n}\r\n\r\nexport default DeviceRender;","C:\\Users\\Marco\\git\\gateway-client-web\\src\\SIAbstractGatewayClient.tsx",["70"],["71","72"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\Devices.tsx",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":84,"column":15,"nodeType":"79","messageId":"80","endLine":84,"endColumn":44},{"ruleId":"81","severity":1,"message":"82","line":129,"column":29,"nodeType":"83","messageId":"84","endLine":129,"endColumn":31},{"ruleId":"77","severity":1,"message":"85","line":4,"column":9,"nodeType":"79","messageId":"80","endLine":4,"endColumn":23},{"ruleId":"86","severity":1,"message":"87","line":13,"column":5,"nodeType":"88","messageId":"89","endLine":15,"endColumn":6},{"ruleId":"77","severity":1,"message":"90","line":43,"column":13,"nodeType":"79","messageId":"80","endLine":43,"endColumn":21},{"ruleId":"73","replacedBy":"91"},{"ruleId":"75","replacedBy":"92"},{"ruleId":"77","severity":1,"message":"78","line":84,"column":15,"nodeType":"79","messageId":"80","endLine":84,"endColumn":44},{"ruleId":"77","severity":1,"message":"85","line":4,"column":9,"nodeType":"79","messageId":"80","endLine":4,"endColumn":23},{"ruleId":"86","severity":1,"message":"87","line":13,"column":5,"nodeType":"88","messageId":"89","endLine":15,"endColumn":6},{"ruleId":"77","severity":1,"message":"90","line":43,"column":13,"nodeType":"79","messageId":"80","endLine":43,"endColumn":21},{"ruleId":"81","severity":1,"message":"82","line":129,"column":29,"nodeType":"83","messageId":"84","endLine":129,"endColumn":31},{"ruleId":"73","replacedBy":"93"},{"ruleId":"75","replacedBy":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"@typescript-eslint/no-unused-vars","'responseSubscription' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'DeviceProperty' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'btnLabel' is assigned a value but never used.",["95"],["96"],["95"],["96"],"no-global-assign","no-unsafe-negation"]