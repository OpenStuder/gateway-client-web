[{"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\index.tsx":"1","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\reportWebVitals.ts":"2","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\App.tsx":"3","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\Devices.tsx":"4","C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\DeviceRender.tsx":"5","C:\\Users\\Marco\\git\\gateway-client-web\\src\\index.tsx":"6","C:\\Users\\Marco\\git\\gateway-client-web\\src\\reportWebVitals.ts":"7","C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSamples\\App.tsx":"8","C:\\Users\\Marco\\git\\gateway-client-web\\src\\OpenStuder\\OpenStuder.ts":"9"},{"size":500,"mtime":1612174867139,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":6172,"mtime":1613056576616,"results":"13","hashOfConfig":"11"},{"size":1490,"mtime":1612519156791,"results":"14","hashOfConfig":"11"},{"size":1605,"mtime":1613057208321,"results":"15","hashOfConfig":"11"},{"size":511,"mtime":1614094893087,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":2476,"mtime":1614095904318,"results":"19","hashOfConfig":"17"},{"size":25129,"mtime":1614096080906,"results":"20","hashOfConfig":"17"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"16hdhh2",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"o8738k",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\index.tsx",[],["43","44"],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\reportWebVitals.ts",[],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\App.tsx",["45"],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\Devices.tsx",[],"C:\\Users\\Marco\\WebstormProjects\\studernext-simpleclient\\src\\DeviceRender.tsx",["46","47","48"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\index.tsx",[],["49","50"],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\reportWebVitals.ts",[],"C:\\Users\\Marco\\git\\gateway-client-web\\src\\AppSamples\\App.tsx",["51"],"import React from 'react';\nimport './App.css';\n\nimport logo from \"./logo-studer.png\"\n\nimport {OpenStuderInterface, SIConnectionState, SIDeviceMessage, SIGatewayClient} from \"../OpenStuder/OpenStuder\";\n\nlet oui;\n\ntype AppState={\n  testAuthorize:string,\n  testEnumerate:string,\n  testRead:string,\n}\n\nclass App extends React.Component<{ }, AppState> implements OpenStuderInterface{\n\n    sigc:SIGatewayClient;\n    constructor(props:any) {\n    super(props);\n    this.state={testAuthorize:\"-\",testEnumerate:\"-\",testRead:\"-\"};\n    this.sigc = new SIGatewayClient(this);\n    }\n\n    public componentDidMount() {\n        this.sigc.connect(\"ws://153.109.24.113\",1987, \"installer\", \"installer\");\n    }\n\n    public render() {\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"Title\">\n              <div><img src={logo} alt=\"\" className=\"App-logo\"/><span className=\"marge\">StuderNext</span></div>\n            </h1>\n            <p>Protocol version : {this.state.testAuthorize}</p>\n            <p>Device count : {this.state.testEnumerate}</p>\n            <p>Read value : {this.state.testRead}</p>\n          </header>\n        </div>\n    );\n    }\n\n    onChangeConnectionState(state: SIConnectionState): void {\n        if(state===SIConnectionState.CONNECTED){\n            this.sigc.enumerate();\n             this.sigc.readProperty(\"xcom.10.3023\");\n        }\n    }\n\n    onDatalogReadCallback(deviceMessage: SIDeviceMessage): void {\n    }\n\n    onDescriptionCallback(deviceMessage: SIDeviceMessage): void {\n    }\n\n    onDeviceMessageCallback(deviceMessage: SIDeviceMessage): void {\n    }\n\n    onEnumerateCallback(deviceMessage: SIDeviceMessage): void {\n        if(deviceMessage.deviceCount) {\n            this.setState({testEnumerate: deviceMessage.deviceCount});\n        }\n    }\n\n    onErrorCallback(deviceMessage: SIDeviceMessage): void {\n    }\n\n    onMessageReadCallback(devicesMessage: SIDeviceMessage[]): void {\n    }\n\n    onPropertyReadCallback(deviceMessage: SIDeviceMessage): void {\n        if(deviceMessage.value) {\n            this.setState({testRead: deviceMessage.value});\n        }\n    }\n\n    onPropertySubscribeCallback(deviceMessage: SIDeviceMessage): void {\n    }\n\n    onPropertyUnsubscribeCallback(deviceMessage: SIDeviceMessage): void {\n    }\n\n    onPropertyUpdateCallback(deviceMessage: SIDeviceMessage): void {\n    }\n\n    onPropertyWrittenCallback(deviceMessage: SIDeviceMessage): void {\n    }\n}\n\nexport default App;","C:\\Users\\Marco\\git\\gateway-client-web\\src\\OpenStuder\\OpenStuder.ts",["52","53"],"export enum SIDescriptionFlags{\r\n    INCLUDE_ACCESS_INFORMATION,\r\n    INCLUDE_PROPERTY_INFORMATION,\r\n    INCLUDE_DEVICE_INFORMATION,\r\n    INCLUDE_DRIVER_INFORMATION ,\r\n}\r\n\r\nexport enum SIWriteFlags{\r\n    NONE=0,\r\n    PERMANENT=1,\r\n}\r\n\r\nexport enum SIStatus{\r\n    SUCCESS = 0,\r\n    IN_PROGRESS = 1,\r\n    ERROR = -1,\r\n    NO_PROPERTY = -2,\r\n    NO_DEVICE = -3,\r\n    NO_DEVICE_ACCESS = -4,\r\n    TIMEOUT = -5,\r\n    INVALID_VALUE = -6\r\n}\r\n\r\ntype DecodedFrame={\r\n    command:string,\r\n    body:string,\r\n    headers:Map<string,string>\r\n}\r\n\r\nexport type SIDeviceMessage={\r\n    body?:string,\r\n    status?:string,\r\n    deviceCount?:string,\r\n    id?:string,\r\n    value?:string,\r\n    accessId?:string,\r\n    messageId?:string,\r\n    deviceId?:string,\r\n    message?:string,\r\n    access_level?:string,\r\n    count?:string,\r\n    timestamp?:string,\r\n    gatewayVersion?:string,\r\n}\r\n\r\nclass SIProtocolError{\r\n    static raise(error:string){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport enum SIConnectionState{\r\n    DISCONNECTED,\r\n    CONNECTING,\r\n    AUTHORIZING,\r\n    CONNECTED,\r\n}\r\n\r\nexport enum SIAccessLevel{\r\n    NONE,\r\n    BASIC,\r\n    INSTALLER,\r\n    EXPERT,\r\n    QUALIFIED_SERVICE_PERSONNEL\r\n}\r\n\r\nfunction SIAccessLevelFromString(str:string):SIAccessLevel{\r\n    switch(str){\r\n        case 'None':\r\n            return SIAccessLevel.NONE;\r\n        case 'Basic':\r\n            return SIAccessLevel.BASIC;\r\n        case 'INSTALLER':\r\n            return SIAccessLevel.INSTALLER;\r\n        case 'EXPERT':\r\n            return SIAccessLevel.EXPERT;\r\n        case 'QSP':\r\n            return SIAccessLevel.QUALIFIED_SERVICE_PERSONNEL;\r\n        default:\r\n            return SIAccessLevel.NONE;\r\n    }\r\n}\r\n\r\nclass SIAbstractGatewayClient {\r\n    static decodeFrame(frame:string):DecodedFrame{\r\n        let command:string=\"INVALID\";\r\n        let headers:Map<string,string>=new Map<string, string>();\r\n\r\n        let lines:string[]=frame.split(\"\\n\");\r\n        if(lines.length>1){\r\n            command=lines[0];\r\n        }\r\n\r\n        let line=1;\r\n        while (line<lines.length){\r\n            let components = lines[line].split(\":\");\r\n            if (components.length===2){\r\n                headers.set(components[0],components[1]);\r\n            }\r\n            line +=1;\r\n        }\r\n        line -=1;\r\n        let body = lines[line];\r\n\r\n        let decodedFrame:DecodedFrame={body:body,headers:headers,command:command};\r\n        return decodedFrame;\r\n\r\n    }\r\n\r\n    static encodeAuthorizeFrame(user?:string, password?:string):string{\r\n        if(user===undefined || password === undefined) {\r\n            return \"AUTHORIZE\\nuser:\" + user + \"\\npassword:\" + password + \"\\nprotocol_version:1\\n\\n\";\r\n        }\r\n        else{\r\n            return 'AUTHORIZE\\nprotocol_version:1\\n\\n';\r\n        }\r\n    }\r\n\r\n    static decodeAuthorizedFrame(frame:string):SIDeviceMessage{\r\n        let decodedFrame:DecodedFrame = this.decodeFrame(frame);\r\n        let retVal:SIDeviceMessage= {\r\n            access_level:undefined,\r\n            gatewayVersion:undefined,\r\n        };\r\n\r\n        if(decodedFrame.command===\"AUTHORIZED\" && decodedFrame.headers.has(\"access_level\") &&\r\n            decodedFrame.headers.has(\"protocol_version\")){\r\n            if (decodedFrame.headers.get(\"protocol_version\")===\"1\"){\r\n                retVal.access_level=decodedFrame.headers.get(\"access_level\");\r\n                retVal.gatewayVersion=decodedFrame.headers.get(\"gateway_version\")\r\n                return retVal;\r\n            }\r\n            else{\r\n                SIProtocolError.raise(\"protocol version 1 not supported by server\");\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"Error\" && decodedFrame.headers.has(\"reason\")){\r\n            let reason:string=\"\"+decodedFrame.headers.get(\"reason\");\r\n            SIProtocolError.raise(reason);\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during authorization\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeEnumerateFrame(){\r\n        return \"ENUMERATE\\n\\n\";\r\n    }\r\n\r\n    static decodeEnumerateFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            deviceCount:undefined,\r\n        };\r\n        let decodedFrame:DecodedFrame=this.decodeFrame(frame);\r\n        if(decodedFrame.command===\"ENUMERATED\"){\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.deviceCount=decodedFrame.headers.get(\"device_count\");\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during property read\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeDescribeFrame(deviceAccessId:string|undefined, deviceId:string|undefined,\r\n                               flags:SIDescriptionFlags[]|undefined):string{\r\n        let frame=\"DESCRIBE\\n\";\r\n        if(deviceAccessId){\r\n            frame+=\"id:\"+deviceAccessId;\r\n            if(deviceId){\r\n                frame+=\".\"+deviceId;\r\n            }\r\n            frame+=\"\\n\";\r\n        }\r\n        if(flags?.length!==0 && flags!==undefined){\r\n            frame+=\"flags:\";\r\n            flags?.map(flag =>{\r\n                if (flag === SIDescriptionFlags.INCLUDE_ACCESS_INFORMATION) {\r\n                    frame+=\"IncludeAccessInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_PROPERTY_INFORMATION) {\r\n                    frame+=\"IncludePropertyInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_DEVICE_INFORMATION) {\r\n                    frame+=\"IncludeDeviceInformation,\";\r\n                }\r\n                if (flag === SIDescriptionFlags.INCLUDE_DRIVER_INFORMATION) {\r\n                    frame+=\"IncludeDriverInformation,\";\r\n                }\r\n            });\r\n            //Suppress the last ',' or \\n if no flag\r\n            frame = frame.substring(0, frame.length - 1);\r\n            frame+=\"\\n\";\r\n        }\r\n        frame+=\"\\n\";\r\n        return frame;\r\n    }\r\n\r\n    static decodeDescriptionFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            body:undefined,\r\n            status:undefined,\r\n        };\r\n        let decodedFrame:DecodedFrame=this.decodeFrame(frame);\r\n        if(decodedFrame.command===\"DESCRIPTION\" && decodedFrame.headers.has(\"status\")) {\r\n            let status = decodedFrame.headers.get(\"status\");\r\n            retVal.status=status;\r\n            if (status === \"Success\") {\r\n                retVal.body=decodedFrame.body;\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during description\");\r\n        }\r\n        if(decodedFrame.headers.has(\"id\")){\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeReadPropertyFrame(propertyId:string):string{\r\n        return \"READ PROPERTY\\nid:\"+propertyId+\"\\n\\n\";\r\n    }\r\n\r\n    static decodePropertyReadFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n            value:undefined,\r\n        };\r\n        let decodedFrame:DecodedFrame=this.decodeFrame(frame);\r\n        if(decodedFrame.command===\"PROPERTY READ\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            let status = decodedFrame.headers.get(\"status\");\r\n            retVal.status=status;\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n            if(status===\"Success\" && decodedFrame.headers.has(\"value\")){\r\n                retVal.value=decodedFrame.headers.get(\"value\");\r\n            }\r\n        }\r\n        else if(decodedFrame.command===\"ERROR\"){\r\n            SIProtocolError.raise(\"\"+decodedFrame.headers.get(\"reason\"));\r\n        }\r\n        else{\r\n            SIProtocolError.raise(\"unknown error during property read\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeWritePropertyFrame(propertyId:string, value?:string, flags?:SIWriteFlags):string{\r\n        let frame = \"WRITE PROPERTY\\nid:\" + propertyId + \"\\n\";\r\n        if(flags){\r\n            frame+=\"flags:\";\r\n            if(flags === SIWriteFlags.PERMANENT){\r\n                frame+=\"Permanent\";\r\n            }\r\n            frame+=\"\\n\";\r\n        }\r\n        if(value){\r\n            frame+=\"value:\"+value+\"\\n\";\r\n        }\r\n        frame+=\"\\n\";\r\n        return frame;\r\n    }\r\n\r\n    static decodePropertyWrittenFrame(frame:string):SIDeviceMessage {\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"PROPERTY WRITTEN\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error during property write\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeSubscribePropertyFrame(propertyId:string):string{\r\n        return \"SUBSCRIBE PROPERTY\\nid:\"+propertyId+\"\\n\\n\";\r\n    }\r\n\r\n    static decodePropertySubscribedFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"PROPERTY SUBSCRIBED\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error during property subscribe\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeUnsubscribePropertyFrame(propertyId:string):string{\r\n        return \"UNSUBSCRIBE PROPERTY\\nid:\"+propertyId+\"\\n\\n\";\r\n    }\r\n\r\n    static decodePropertyUnsubscribedFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"PROPERTY UNSUBSCRIBED\" && decodedFrame.headers.has(\"status\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error during property subscribe\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static decodePropertyUpdateFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"PROPERTY UPDATE\" && decodedFrame.headers.has(\"value\")\r\n            && decodedFrame.headers.has(\"id\")) {\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving property update\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeReadDatalogFrame(propertyId:string, dateFrom?:Date, dateTo?:Date, limit?:number){\r\n        let frame:string = 'READ DATALOG\\nid:' + propertyId + '\\n';\r\n        frame += SIAbstractGatewayClient.getTimestampHeader('from',dateFrom);\r\n        frame += SIAbstractGatewayClient.getTimestampHeader('to',dateTo);\r\n        if(limit){\r\n            frame += 'limit'+limit;\r\n        }\r\n        frame += '\\n';\r\n        return frame;\r\n    }\r\n\r\n    static decodeDatalogReadFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            status:undefined,\r\n            id:undefined,\r\n            count:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"DATALOG READ\" && decodedFrame.headers.has(\"status\" )\r\n            && decodedFrame.headers.has(\"id\")&& decodedFrame.headers.has(\"count\"))\r\n        {\r\n            retVal.id=decodedFrame.headers.get(\"id\");\r\n            retVal.status=decodedFrame.headers.get(\"status\");\r\n            retVal.count=decodedFrame.headers.get(\"count\");\r\n            retVal.body=decodedFrame.body;\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving datalog read\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static encodeReadMessagesFrame(dateFrom?:Date, dateTo?:Date, limit?:number){\r\n        let frame:string = 'READ MESSAGES\\n';\r\n        frame += SIAbstractGatewayClient.getTimestampHeader('from',dateFrom);\r\n        frame += SIAbstractGatewayClient.getTimestampHeader('to',dateTo);\r\n        if(limit){\r\n            frame += 'limit:'+limit;\r\n        }\r\n        frame += '\\n';\r\n        return frame;\r\n    }\r\n\r\n    static decodeMessagesReadFrame(frame:string):SIDeviceMessage[]{\r\n        let retVal:SIDeviceMessage[]=[];\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"MESSAGES READ\" && decodedFrame.headers.has(\"status\" )\r\n            && decodedFrame.headers.has(\"count\"))\r\n        {\r\n            retVal=JSON.parse(decodedFrame.body);\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving messages\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static decodeDeviceMessageFrame(frame:string):SIDeviceMessage{\r\n        let retVal:SIDeviceMessage= {\r\n            id:undefined,\r\n            accessId:undefined,\r\n            messageId:undefined,\r\n            message:undefined,\r\n            timestamp:undefined,\r\n        };\r\n        let decodedFrame: DecodedFrame = this.decodeFrame(frame);\r\n        if (decodedFrame.command === \"DEVICE MESSAGE\" && decodedFrame.headers.has(\"access_id\")\r\n            && decodedFrame.headers.has(\"device_id\")&& decodedFrame.headers.has(\"message_id\")&&\r\n            decodedFrame.headers.has(\"message\") && decodedFrame.headers.has(\"timestamp\"))\r\n        {\r\n            retVal.accessId=decodedFrame.headers.get(\"access_id\");\r\n            retVal.messageId=decodedFrame.headers.get(\"message_id\");\r\n            retVal.message=decodedFrame.headers.get(\"message\");\r\n            retVal.deviceId=decodedFrame.headers.get(\"device_id\");\r\n            retVal.timestamp=decodedFrame.headers.get(\"timestamp\");\r\n        } else if (decodedFrame.command === \"ERROR\") {\r\n            SIProtocolError.raise(\"\" + decodedFrame.headers.get(\"reason\"));\r\n        } else {\r\n            SIProtocolError.raise(\"unknown error receiving device message\");\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    static getTimestampHeader(key:string, timestamp?:Date):string{\r\n        if(timestamp){\r\n            return key + ':' + timestamp.toISOString();\r\n        }\r\n        else{\r\n            return '';\r\n        }\r\n    }\r\n    //Get the command of the frame received\r\n    static peekFrameCommand(frame:string):string{\r\n        //Return the first line of the received frame\r\n        return (frame.split(\"\\n\"))[0];\r\n    }\r\n}\r\n\r\nexport abstract class OpenStuderInterface{\r\n\r\n    public abstract onChangeConnectionState(state:SIConnectionState):void;\r\n\r\n    public abstract onEnumerateCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onErrorCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onDescriptionCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onPropertyReadCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onPropertyWrittenCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onPropertySubscribeCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onPropertyUnsubscribeCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onPropertyUpdateCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onDatalogReadCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onDeviceMessageCallback(deviceMessage:SIDeviceMessage):void;\r\n\r\n    public abstract onMessageReadCallback(devicesMessage:SIDeviceMessage[]):void;\r\n}\r\n\r\nexport class SIGatewayClient extends SIAbstractGatewayClient{\r\n    //Attributes\r\n    state: SIConnectionState;\r\n    accessLevel: SIAccessLevel;\r\n    gatewayVersion: string;\r\n    ws:WebSocket|null;\r\n    deviceCount:number;\r\n    osi:OpenStuderInterface;\r\n\r\n    public constructor(osi:OpenStuderInterface){\r\n        super();\r\n        this.state = SIConnectionState.DISCONNECTED;\r\n        this.gatewayVersion='';\r\n        this.accessLevel=SIAccessLevel.NONE;\r\n        this.deviceCount=0;\r\n        this.ws=null;\r\n        this.osi=osi;\r\n    }\r\n\r\n    public connect(host:string,port:number = 1987,user?:string,password?:string ) {\r\n        this.ensureInState(SIConnectionState.DISCONNECTED);\r\n        this.ws = new WebSocket(host + ':' + port);\r\n        this.setStateSI(SIConnectionState.CONNECTING);\r\n        this.ws.onopen = (event:Event)=>{\r\n            this.setStateSI(SIConnectionState.AUTHORIZING);\r\n            let frame = SIGatewayClient.encodeAuthorizeFrame(user,password);\r\n            if(this.ws){\r\n                this.ws.send(frame);\r\n            }\r\n        };\r\n        this.ws.onmessage = (event:MessageEvent)=>{\r\n            let command: string = SIGatewayClient.peekFrameCommand(event.data);\r\n            let frame:string=\"\";\r\n            let receivedMessage:SIDeviceMessage;\r\n            let receivedMessagesRead:SIDeviceMessage[];\r\n            if(this.state===SIConnectionState.AUTHORIZING && command ===\"AUTHORIZED\"){\r\n                this.setStateSI(SIConnectionState.CONNECTED);\r\n                let flags: SIDescriptionFlags[] = [SIDescriptionFlags.INCLUDE_PROPERTY_INFORMATION, SIDescriptionFlags.INCLUDE_ACCESS_INFORMATION,\r\n                    SIDescriptionFlags.INCLUDE_DEVICE_INFORMATION, SIDescriptionFlags.INCLUDE_DRIVER_INFORMATION];\r\n                frame = SIGatewayClient.encodeDescribeFrame(undefined, undefined, flags);\r\n                if(this.ws) {\r\n                    this.ws.send(frame);\r\n                }\r\n            }\r\n            else if(this.state===SIConnectionState.CONNECTED){\r\n                switch (command) {\r\n                    case \"ERROR\":\r\n                        SIProtocolError.raise(\"\"+SIGatewayClient.decodeFrame(event.data).headers.get(\"reason\"));\r\n                        break;\r\n                    case \"ENUMERATED\":\r\n                        receivedMessage = SIGatewayClient.decodeEnumerateFrame(event.data);\r\n                        this.osi.onEnumerateCallback(receivedMessage);\r\n                        break;\r\n                    case \"DESCRIPTION\":\r\n                        receivedMessage = SIGatewayClient.decodeDescriptionFrame(event.data);\r\n                        this.osi.onDescriptionCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY READ\":\r\n                        receivedMessage = SIGatewayClient.decodePropertyReadFrame(event.data);\r\n                        this.osi.onPropertyReadCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY WRITTEN\":\r\n                        receivedMessage = SIGatewayClient.decodePropertyWrittenFrame(event.data);\r\n                        this.osi.onPropertyWrittenCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY SUBSCRIBED\":\r\n                        receivedMessage = SIGatewayClient.decodePropertySubscribedFrame(event.data);\r\n                        this.osi.onPropertySubscribeCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY UNSUBSCRIBED\":\r\n                        receivedMessage = SIGatewayClient.decodePropertyUnsubscribedFrame(event.data);\r\n                        this.osi.onPropertyUnsubscribeCallback(receivedMessage);\r\n                        break;\r\n                    case \"PROPERTY UPDATE\":\r\n                        receivedMessage = SIGatewayClient.decodePropertyUpdateFrame(event.data);\r\n                        this.osi.onPropertyUpdateCallback(receivedMessage);\r\n                        break;\r\n                    case \"DATALOG READ\":\r\n                        receivedMessage = SIGatewayClient.decodeDatalogReadFrame(event.data);\r\n                        this.osi.onDatalogReadCallback(receivedMessage);\r\n                        break;\r\n                    case \"DEVICE MESSAGE\":\r\n                        receivedMessage = SIGatewayClient.decodeDeviceMessageFrame(event.data);\r\n                        this.osi.onDeviceMessageCallback(receivedMessage);\r\n                        break;\r\n                    case \"MESSAGES READ\":\r\n                        receivedMessagesRead = SIGatewayClient.decodeMessagesReadFrame(event.data);\r\n                        this.osi.onMessageReadCallback(receivedMessagesRead);\r\n                        break;\r\n                    default:\r\n                        SIProtocolError.raise(\"unsupported frame command :\"+command);\r\n                }\r\n            }\r\n        }\r\n        this.ws.onclose = (event:Event)=>{\r\n            this.setStateSI(SIConnectionState.DISCONNECTED);\r\n            this.accessLevel = SIAccessLevel.NONE;\r\n        }\r\n        this.ws.onerror = (event:Event)=>{\r\n            SIProtocolError.raise(\"Error occurs on the websocket\");\r\n        }\r\n    }\r\n\r\n    public getState():SIConnectionState{\r\n        return this.state;\r\n    }\r\n\r\n    public getAccessLevel():SIAccessLevel{\r\n        return this.accessLevel;\r\n    }\r\n\r\n    public getGatewayVersion():string{\r\n        return this.gatewayVersion;\r\n    }\r\n\r\n    public enumerate(){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeEnumerateFrame());\r\n        }\r\n    }\r\n\r\n    public describe(deviceAccessId:string, deviceId?:string,flags?:SIDescriptionFlags[]){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeDescribeFrame(deviceAccessId,deviceId,flags));\r\n        }\r\n    }\r\n\r\n    public readProperty(propertyId:string){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeReadPropertyFrame(propertyId));\r\n        }\r\n    }\r\n\r\n    public writeProperty(propertyId:string,value?:any){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeWritePropertyFrame(propertyId,value));\r\n        }\r\n    }\r\n\r\n    public subscribeProperty(propertyId:string){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeSubscribePropertyFrame(propertyId));\r\n        }\r\n    }\r\n\r\n    public unsubscribeFromProperty(propertyId:string){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeUnsubscribePropertyFrame(propertyId));\r\n        }\r\n    }\r\n\r\n    public readDatalog(propertyId:string,dateFrom?:Date,dateTo?:Date,limit?:number){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeReadDatalogFrame(propertyId,dateFrom, dateTo, limit));\r\n        }\r\n    }\r\n\r\n    public readMessages(dateFrom?:Date, dateTo?:Date, limit?:number){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.send(SIGatewayClient.encodeReadMessagesFrame(dateFrom, dateTo, limit));\r\n        }\r\n    }\r\n\r\n    public disconnect(){\r\n        this.ensureInState(SIConnectionState.CONNECTED);\r\n        if(this.ws) {\r\n            this.ws.close();\r\n        }\r\n    }\r\n\r\n    public ensureInState(state:SIConnectionState){\r\n        if(state!==this.state){\r\n            SIProtocolError.raise(\"invalid client state\");\r\n        }\r\n    }\r\n\r\n    public setStateSI(state:SIConnectionState){\r\n        this.state=state;\r\n        this.osi.onChangeConnectionState(this.state);\r\n    }\r\n\r\n}\r\n",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":84,"column":15,"nodeType":"60","messageId":"61","endLine":84,"endColumn":44},{"ruleId":"58","severity":1,"message":"62","line":4,"column":9,"nodeType":"60","messageId":"61","endLine":4,"endColumn":23},{"ruleId":"63","severity":1,"message":"64","line":13,"column":5,"nodeType":"65","messageId":"66","endLine":15,"endColumn":6},{"ruleId":"58","severity":1,"message":"67","line":43,"column":13,"nodeType":"60","messageId":"61","endLine":43,"endColumn":21},{"ruleId":"54","replacedBy":"68"},{"ruleId":"56","replacedBy":"69"},{"ruleId":"58","severity":1,"message":"70","line":8,"column":5,"nodeType":"60","messageId":"61","endLine":8,"endColumn":8},{"ruleId":"58","severity":1,"message":"71","line":67,"column":10,"nodeType":"60","messageId":"61","endLine":67,"endColumn":33},{"ruleId":"72","severity":1,"message":"73","line":182,"column":29,"nodeType":"74","messageId":"75","endLine":182,"endColumn":31},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"@typescript-eslint/no-unused-vars","'responseSubscription' is assigned a value but never used.","Identifier","unusedVar","'DeviceProperty' is defined but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'btnLabel' is assigned a value but never used.",["76"],["77"],"'oui' is defined but never used.","'SIAccessLevelFromString' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]